/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanzahmsservicemobilejkn;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import fungsi.ApiMobileJKN;
import fungsi.koneksiDB;
import fungsi.sekuel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Timer;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;

/**
 *
 * @author windiartonugroho
 */
public class frmUtama extends javax.swing.JFrame {
    private Connection koneksi = koneksiDB.condb();
    private sekuel Sequel = new sekuel();
    private String requestJson = "", url = "", utc = "", link = "", waktu = "", noresep = "", antrean = "",
        task1 = "", task2 = "", task3 = "", task4 = "", task5 = "", task6 = "", task7 = "", task99 = "",
        kodebpjs = Sequel.cariIsiSmc("select password_asuransi.kd_pj from password_asuransi");
    private ApiMobileJKN api = new ApiMobileJKN();
    private HttpHeaders headers;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root, metadata;
    private Calendar cal = Calendar.getInstance();
    private SimpleDateFormat dtf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat tgl = new SimpleDateFormat("yyyy-MM-dd");
    private Date date;
    private ObjectNode json;

    /**
     * Creates new form frmUtama
     */
    public frmUtama() {
        initComponents();
        try {
            link = koneksiDB.URLAPIMOBILEJKN();
        } catch (Exception e) {
            System.out.println("E : " + e);
        }

        this.setSize(390, 340);

        Tanggal1.setDate(cal.getTime());
        jam();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TeksArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Tanggal1 = new widget.Tanggal();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMKES Khanza Service Mobile JKN ERM");

        TeksArea.setColumns(20);
        TeksArea.setRows(5);
        jScrollPane1.setViewportView(TeksArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Tanggal :");
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel1.add(jLabel1);

        Tanggal1.setDisplayFormat("yyyy-MM-dd"); // NOI18N
        Tanggal1.setPreferredSize(new java.awt.Dimension(90, 22));
        jPanel1.add(Tanggal1);

        jButton1.setText("Keluar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new frmUtama().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Tanggal Tanggal1;
    private javax.swing.JTextArea TeksArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private void jam() {
        ActionListener taskPerformer = new ActionListener() {
            private int jam;
            private int menit;
            private int detik;

            @Override
            public void actionPerformed(ActionEvent evt) {
                cal = Calendar.getInstance();
                jam = cal.get(Calendar.HOUR_OF_DAY);
                menit = cal.get(Calendar.MINUTE);
                detik = cal.get(Calendar.SECOND);

                if (jam == 1 && menit < 5) {
                    TeksArea.setText("");
                    Tanggal1.setDate(cal.getTime());
                }

                if (detik == 1 && (menit % 5 == 0)) {
                    koneksi = koneksiDB.condb();

                    // Addantrean MobileJKN
                    TeksArea.append("Menjalankan WS tambah antrian pasien BPJS Mobile JKN\n");
                    try (PreparedStatement ps = koneksi.prepareStatement(
                        "select b.*, r.no_rkm_medis, px.nm_pasien, p.nm_poli, d.nm_dokter, from_unixtime(b.estimasidilayani / 1000) as dt_ed " +
                        "from referensi_mobilejkn_bpjs b join reg_periksa r on b.no_rawat = r.no_rawat join pasien px on r.no_rkm_medis = px.no_rkm_medis " +
                        "join poliklinik p on r.kd_poli = p.kd_poli join dokter d on r.kd_dokter = d.kd_dokter where b.status = 'Belum' and " +
                        "b.statuskirim = 'Belum' and b.tanggalperiksa between ? and date_add(?, interval 30 day) order by b.tanggalperiksa"
                    )) {
                        ps.setString(1, tgl.format(Tanggal1.getDate()));
                        ps.setString(2, tgl.format(Tanggal1.getDate()));
                        try (ResultSet rs = ps.executeQuery()) {
                            while (rs.next()) {
                                json = mapper.createObjectNode();
                                json.put("kodebooking", rs.getString("nobooking"));
                                json.put("jenispasien", "JKN");
                                json.put("nomorkartu", rs.getString("nomorkartu"));
                                json.put("nik", rs.getString("nik"));
                                json.put("nohp", rs.getString("nohp"));
                                json.put("kodepoli", rs.getString("kodepoli"));
                                json.put("namapoli", rs.getString("nm_poli"));
                                json.put("pasienbaru", rs.getInt("pasienbaru"));
                                json.put("norm", rs.getString("no_rkm_medis"));
                                json.put("tanggalperiksa", rs.getString("tanggalperiksa"));
                                json.put("kodedokter", rs.getInt("kodedokter"));
                                json.put("namadokter", rs.getString("nm_dokter"));
                                json.put("jampraktek", rs.getString("jampraktek"));
                                json.put("jeniskunjungan", Integer.parseInt(rs.getString("jeniskunjungan").substring(0, 1)));
                                json.put("nomorreferensi", rs.getString("nomorreferensi"));
                                json.put("nomorantrean", rs.getString("nomorantrean"));
                                json.put("angkaantrean", rs.getInt("angkaantrean"));
                                json.put("estimasidilayani", rs.getLong("estimasidilayani"));
                                json.put("sisakuotajkn", rs.getInt("sisakuotajkn"));
                                json.put("kuotajkn", rs.getInt("kuotajkn"));
                                json.put("sisakuotanonjkn", rs.getInt("sisakuotanonjkn"));
                                json.put("kuotanonjkn", rs.getInt("kuotanonjkn"));
                                json.put("keterangan", "Peserta harap 30 menit lebih awal guna pencatatan administrasi.");
                                requestJson = json.toString();
                                try {
                                    headers = new HttpHeaders();
                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                    headers.add("x-timestamp", utc);
                                    headers.add("x-signature", api.getHmac(utc));
                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                    TeksArea.append("JSON : " + requestJson + "\n");
                                    requestEntity = new HttpEntity(requestJson, headers);
                                    url = link + "/antrean/add";
                                    System.out.print("addantrean " + rs.getString("nobooking") + " : ");
                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                    metadata = root.path("metadata");
                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "addantrean", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), rs.getString("dt_ed"));
                                    if (metadata.path("code").asText().equals("200") || metadata.path("code").asText().equals("208") || metadata.path("message").asText().equals("Ok")) {
                                        Sequel.mengupdateSmc("referensi_mobilejkn_bpjs", "statuskirim = 'Sudah'", "nobooking = ?", rs.getString("nobooking"));
                                    }
                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                } catch (HttpClientErrorException e) {
                                    System.out.println("Notif : " + e.getMessage());
                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "addantrean", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), rs.getString("dt_ed"));
                                } catch (HttpServerErrorException e) {
                                    System.out.println("Notif : " + e.getMessage());
                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "addantrean", requestJson, e.getStatusCode().toString(), e.getMessage(), "", rs.getString("dt_ed"));
                                } catch (Exception e) {
                                    System.out.println("Notif : " + e);
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.out.println("Notif : " + e);
                    }

                    // Batalantrean MobileJKN
                    try (PreparedStatement ps = koneksi.prepareStatement(
                        "select * from referensi_mobilejkn_bpjs_batal b where b.statuskirim = 'Belum' and b.tanggalbatal between date_sub(?, interval 6 day) and date_add(?, interval 30 day)"
                    )) {
                        ps.setString(1, tgl.format(Tanggal1.getDate()) + " 00:00:00.000");
                        ps.setString(2, tgl.format(Tanggal1.getDate()) + " 23:59:59.999");
                        try (ResultSet rs = ps.executeQuery()) {
                            while (rs.next()) {
                                json = mapper.createObjectNode();
                                json.put("kodebooking", rs.getString("nobooking"));
                                json.put("keterangan", rs.getString("keterangan"));
                                requestJson = json.toString();
                                try {
                                    headers = new HttpHeaders();
                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                    headers.add("x-timestamp", utc);
                                    headers.add("x-signature", api.getHmac(utc));
                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                    TeksArea.append("JSON : " + requestJson + "\n");
                                    requestEntity = new HttpEntity(requestJson, headers);
                                    url = link + "/antrean/batal";
                                    System.out.print("batalantrean " + rs.getString("nobooking") + " : ");
                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                    metadata = root.path("metadata");
                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                    Sequel.logTaskid(rs.getString("no_rawat_batal"), rs.getString("nobooking"), "MobileJKN", "batalantrean", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), rs.getString("tanggalbatal"));
                                    if (metadata.path("code").asText().equals("200")) {
                                        Sequel.mengupdateSmc("referensi_mobilejkn_bpjs_batal", "statuskirim = 'Sudah'", "nomorreferensi = ?", rs.getString("nomorreferensi"));
                                    }
                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                } catch (HttpClientErrorException e) {
                                    System.out.println("Notif : " + e.getMessage());
                                    Sequel.logTaskid(rs.getString("no_rawat_batal"), rs.getString("nobooking"), "MobileJKN", "batalantrean", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), rs.getString("tanggalbatal"));
                                } catch (HttpServerErrorException e) {
                                    System.out.println("Notif : " + e.getMessage());
                                    Sequel.logTaskid(rs.getString("no_rawat_batal"), rs.getString("nobooking"), "MobileJKN", "batalantrean", requestJson, e.getStatusCode().toString(), e.getMessage(), "", rs.getString("tanggalbatal"));
                                } catch (Exception e) {
                                    System.out.println("Notif : " + e);
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.out.println("Notif : " + e);
                    }

                    // Taskid MobileJKN
                    try (PreparedStatement ps = koneksi.prepareStatement(
                        "select b.*, r.no_rkm_medis, px.nm_pasien, p.nm_poli, d.nm_dokter, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = b.no_rawat and t.taskid = '3'), 'Sudah', '') as ada_task3, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = b.no_rawat and t.taskid = '4'), 'Sudah', '') as ada_task4, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = b.no_rawat and t.taskid = '5'), 'Sudah', '') as ada_task5, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = b.no_rawat and t.taskid = '6'), 'Sudah', '') as ada_task6, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = b.no_rawat and t.taskid = '7'), 'Sudah', '') as ada_task7, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = b.no_rawat and t.taskid = '99'), 'Sudah', '') as ada_task99 " +
                        "from referensi_mobilejkn_bpjs b join reg_periksa r on b.no_rawat = r.no_rawat join pasien px on r.no_rkm_medis = px.no_rkm_medis join " +
                        "poliklinik p on r.kd_poli = p.kd_poli join dokter d on r.kd_dokter = d.kd_dokter where b.status = 'Checkin' and b.tanggalperiksa between ? and ?"
                    )) {
                        ps.setString(1, tgl.format(Tanggal1.getDate()));
                        ps.setString(2, tgl.format(Tanggal1.getDate()));
                        try (ResultSet rs = ps.executeQuery()) {
                            while (rs.next()) {
                                task3 = rs.getString("ada_task3");
                                task4 = rs.getString("ada_task4");
                                task5 = rs.getString("ada_task5");
                                task6 = rs.getString("ada_task6");
                                task7 = rs.getString("ada_task7");
                                task99 = rs.getString("ada_task99");
                                if (task99.equals("")) {
                                    date = Sequel.cariTglSmc("select concat(reg_periksa.tgl_registrasi, ' 23:59:59.999') from reg_periksa where reg_periksa.no_rawat = ? and reg_periksa.stts = 'Batal'", rs.getString("no_rawat"));
                                    if (date != null) {
                                        waktu = dtf.format(date);
                                        if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "99", waktu)) {
                                            json = mapper.createObjectNode();
                                            json.put("kodebooking", rs.getString("nobooking"));
                                            json.put("taskid", "99");
                                            json.put("waktu", date.getTime());
                                            requestJson = json.toString();
                                            task99 = "Sudah";
                                            try {
                                                TeksArea.append("Menjalankan WS taskid batal pelayanan poli antrian pasien BPJS Mobile JKN\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                url = link + "/antrean/updatewaktu";
                                                System.out.print("taskid99 " + rs.getString("nobooking") + " : ");
                                                root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                metadata = root.path("metadata");
                                                System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "99", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                if (metadata.path("code").asText().equals("200")) {
                                                    Sequel.mengupdateSmc("referensi_mobilejkn_bpjs", "status = 'Batal'", "nobooking = ?", rs.getString("nobooking"));
                                                } else {
                                                    task99 = "";
                                                    Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '99' and no_rawat = ?", rs.getString("no_rawat"));
                                                }
                                                TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                            } catch (HttpClientErrorException e) {
                                                task99 = "";
                                                System.out.println("Notif : " + e.getMessage());
                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "99", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                            } catch (HttpServerErrorException e) {
                                                task99 = "";
                                                System.out.println("Notif : " + e.getMessage());
                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "99", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                            } catch (Exception e) {
                                                task99 = "";
                                                System.out.println("Notif : " + e);
                                            }
                                        }
                                    }
                                }

                                if (task99.equals("")) {
                                    if (task3.equals("")) {
                                        date = (Date) rs.getTimestamp("validasi");
                                        if (date != null) {
                                            waktu = dtf.format(date);
                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "3", waktu)) {
                                                json = mapper.createObjectNode();
                                                json.put("kodebooking", rs.getString("nobooking"));
                                                json.put("taskid", "3");
                                                json.put("waktu", date.getTime());
                                                requestJson = json.toString();
                                                task3 = "Sudah";
                                                try {
                                                    TeksArea.append("Menjalankan WS taskid mulai tunggu poli antrian pasien BPJS Mobile JKN\n");
                                                    headers = new HttpHeaders();
                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                    headers.add("x-timestamp", utc);
                                                    headers.add("x-signature", api.getHmac(utc));
                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                    url = link + "/antrean/updatewaktu";
                                                    System.out.print("taskid3 " + rs.getString("nobooking") + " : ");
                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                    metadata = root.path("metadata");
                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "3", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                    if (!metadata.path("code").asText().equals("200")) {
                                                        task3 = "";
                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '3' and no_rawat = ?", rs.getString("no_rawat"));
                                                    }
                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                } catch (HttpClientErrorException e) {
                                                    task3 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "3", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                } catch (HttpServerErrorException e) {
                                                    task3 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "3", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                } catch (Exception e) {
                                                    task3 = "";
                                                    System.out.println("Notif : " + e);
                                                }
                                            }
                                        }
                                    }

                                    if (task3.equals("Sudah") && task4.equals("")) {
                                        date = Sequel.cariTglSmc("select if(m.diterima = '0000-00-00 00:00:00.000', '', m.diterima) from mutasi_berkas m where m.no_rawat = ?", rs.getString("no_rawat"));
                                        if (date == null) {
                                            date = Sequel.cariTglSmc("select concat(p.tgl_perawatan, ' ', p.jam_rawat) from pemeriksaan_ralan p where p.no_rawat = ? and p.nip = ?", rs.getString("no_rawat"), rs.getString("kd_dokter"));
                                        }
                                        if (date != null) {
                                            waktu = dtf.format(date);
                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "4", waktu)) {
                                                json = mapper.createObjectNode();
                                                json.put("kodebooking", rs.getString("nobooking"));
                                                json.put("taskid", "4");
                                                json.put("waktu", date.getTime());
                                                requestJson = json.toString();
                                                task4 = "Sudah";
                                                try {
                                                    TeksArea.append("Menjalankan WS taskid mulai pelayanan poli antrian pasien BPJS Mobile JKN\n");
                                                    headers = new HttpHeaders();
                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                    headers.add("x-timestamp", utc);
                                                    headers.add("x-signature", api.getHmac(utc));
                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                    url = link + "/antrean/updatewaktu";
                                                    System.out.print("taskid4 " + rs.getString("nobooking") + " : ");
                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                    metadata = root.path("metadata");
                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "4", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                    if (!metadata.path("code").asText().equals("200")) {
                                                        task4 = "";
                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '4' and no_rawat = ?", rs.getString("no_rawat"));
                                                    }
                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                } catch (HttpClientErrorException e) {
                                                    task4 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "4", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                } catch (HttpServerErrorException e) {
                                                    task4 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "4", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                } catch (Exception e) {
                                                    task4 = "";
                                                    System.out.println("Notif : " + e);
                                                }
                                            }
                                        }
                                    }

                                    if (task4.equals("Sudah") && task5.equals("")) {
                                        date = Sequel.cariTglSmc("select if(m.kembali = '0000-00-00 00:00:00.000', '', m.kembali) from mutasi_berkas m where m.no_rawat = ?", rs.getString("no_rawat"));
                                        if (date != null) {
                                            waktu = dtf.format(date);
                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "5", waktu)) {
                                                json = mapper.createObjectNode();
                                                json.put("kodebooking", rs.getString("nobooking"));
                                                json.put("taskid", "5");
                                                json.put("waktu", date.getTime());
                                                requestJson = json.toString();
                                                task5 = "Sudah";
                                                try {
                                                    TeksArea.append("Menjalankan WS taskid selesai pelayanan poli antrian pasien BPJS Mobile JKN\n");
                                                    headers = new HttpHeaders();
                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                    headers.add("x-timestamp", utc);
                                                    headers.add("x-signature", api.getHmac(utc));
                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                    url = link + "/antrean/updatewaktu";
                                                    System.out.print("taskid5 " + rs.getString("nobooking") + " : ");
                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                    metadata = root.path("metadata");
                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "5", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                    if (!metadata.path("code").asText().equals("200")) {
                                                        task5 = "";
                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '5' and no_rawat = ?", rs.getString("no_rawat"));
                                                    }
                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                } catch (HttpClientErrorException e) {
                                                    task5 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "5", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                } catch (HttpServerErrorException e) {
                                                    task5 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "5", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                } catch (Exception e) {
                                                    task5 = "";
                                                    System.out.println("Notif : " + e);
                                                }
                                            }
                                        }
                                    }

                                    if (task5.equals("Sudah") && task6.equals("")) {
                                        noresep = Sequel.cariIsiSmc("select resep_obat.no_resep from resep_obat where resep_obat.no_rawat = ?", rs.getString("no_rawat"));
                                        if (!noresep.equals("") && !Sequel.cariExistsSmc("select * from referensi_mobilejkn_bpjs_taskid_response2 r where r.kodebooking = ? " +
                                            "and r.jenispasien = 'MobileJKN' and r.taskid = 'addantreanfarmasi' and r.code in ('200', '208')", rs.getString("nobooking")
                                        )) {
                                            json = mapper.createObjectNode();
                                            json.put("kodebooking", rs.getString("nobooking"));
                                            json.put("jenisresep", Sequel.cariExistsSmc("select * from resep_dokter_racikan where resep_dokter_racikan.no_resep = ?", noresep) ? "Racikan" : "Non Racikan");
                                            json.put("nomorantrean", Integer.parseInt(noresep.substring(noresep.length() - 4)));
                                            json.put("keterangan", "Resep dibuat secara elektronik di poli.");
                                            requestJson = json.toString();
                                            try {
                                                TeksArea.append("Menjalankan WS tambah antrian farmasi pasien BPJS Mobile JKN\n");
                                                headers = new HttpHeaders();
                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                headers.add("x-timestamp", utc);
                                                headers.add("x-signature", api.getHmac(utc));
                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                requestEntity = new HttpEntity(requestJson, headers);
                                                url = link + "/antrean/farmasi/add";
                                                System.out.print("addantreanfarmasi " + rs.getString("nobooking") + " : ");
                                                root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                metadata = root.path("metadata");
                                                System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "addantreanfarmasi", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), null);
                                                TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                            } catch (HttpClientErrorException e) {
                                                System.out.println("Notif : " + e.getMessage());
                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "addantreanfarmasi", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), null);
                                            } catch (HttpServerErrorException e) {
                                                System.out.println("Notif : " + e.getMessage());
                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "addantreanfarmasi", requestJson, e.getStatusCode().toString(), e.getMessage(), "", null);
                                            } catch (Exception e) {
                                                System.out.println("Notif : " + e);
                                            }
                                        }

                                        date = Sequel.cariTglSmc("select concat(resep_obat.tgl_perawatan, ' ', resep_obat.jam) from resep_obat where resep_obat.no_rawat = ? and resep_obat.tgl_perawatan != '0000-00-00' and resep_obat.status = 'ralan'", rs.getString("no_rawat"));
                                        if (date != null) {
                                            waktu = dtf.format(date);
                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "6", waktu)) {
                                                json = mapper.createObjectNode();
                                                json.put("kodebooking", rs.getString("nobooking"));
                                                json.put("taskid", "6");
                                                json.put("waktu", date.getTime());
                                                requestJson = json.toString();
                                                task6 = "Sudah";
                                                try {
                                                    TeksArea.append("Menjalankan WS taskid validasi resep poli antrian pasien BPJS Mobile JKN\n");
                                                    headers = new HttpHeaders();
                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                    headers.add("x-timestamp", utc);
                                                    headers.add("x-signature", api.getHmac(utc));
                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                    url = link + "/antrean/updatewaktu";
                                                    System.out.print("taskid6 " + rs.getString("nobooking") + " : ");
                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                    metadata = root.path("metadata");
                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "6", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                    if (!metadata.path("code").asText().equals("200")) {
                                                        task6 = "";
                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '6' and no_rawat = ?", rs.getString("no_rawat"));
                                                    }
                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                } catch (HttpClientErrorException e) {
                                                    task6 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "6", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                } catch (HttpServerErrorException e) {
                                                    task6 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "6", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                } catch (Exception e) {
                                                    task6 = "";
                                                    System.out.println("Notif : " + e);
                                                }
                                            }
                                        }
                                    }

                                    if (task6.equals("Sudah") && task7.equals("")) {
                                        date = Sequel.cariTglSmc("select concat(resep_obat.tgl_penyerahan, ' ', resep_obat.jam_penyerahan) from resep_obat where resep_obat.no_rawat = ? and resep_obat.tgl_penyerahan != '0000-00-00' and resep_obat.status = 'ralan'", rs.getString("no_rawat"));
                                        if (date != null) {
                                            waktu = dtf.format(date);
                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "7", waktu)) {
                                                json = mapper.createObjectNode();
                                                json.put("kodebooking", rs.getString("nobooking"));
                                                json.put("taskid", "7");
                                                json.put("waktu", date.getTime());
                                                requestJson = json.toString();
                                                task7 = "Sudah";
                                                try {
                                                    TeksArea.append("Menjalankan WS taskid penyerahan resep poli antrian pasien BPJS Mobile JKN\n");
                                                    headers = new HttpHeaders();
                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                    headers.add("x-timestamp", utc);
                                                    headers.add("x-signature", api.getHmac(utc));
                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                    url = link + "/antrean/updatewaktu";
                                                    System.out.print("taskid7 " + rs.getString("nobooking") + " : ");
                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                    metadata = root.path("metadata");
                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "7", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                    if (!metadata.path("code").asText().equals("200")) {
                                                        task7 = "";
                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '7' and no_rawat = ?", rs.getString("no_rawat"));
                                                    }
                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                } catch (HttpClientErrorException e) {
                                                    task7 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "7", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                } catch (HttpServerErrorException e) {
                                                    task7 = "";
                                                    System.out.println("Notif : " + e.getMessage());
                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("nobooking"), "MobileJKN", "7", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                } catch (Exception e) {
                                                    task7 = "";
                                                    System.out.println("Notif : " + e);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.out.println("Notif : " + e);
                    }

                    // Taskid BPJS Onsite / Non JKN
                    try (PreparedStatement ps = koneksi.prepareStatement(
                        "select r.no_reg, r.no_rawat, r.tgl_registrasi, r.kd_dokter, d.nm_dokter, md.kd_dokter_bpjs, md.nm_dokter_bpjs, px.no_ktp, px.no_tlp, " +
                        "r.kd_poli, p.nm_poli, mp.kd_poli_bpjs, mp.nm_poli_bpjs, r.stts_daftar, r.no_rkm_medis, r.kd_pj, dayofweek(r.tgl_registrasi) as hari, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid_response2 a where a.kodebooking = r.no_rawat and a.jenispasien = 'Onsite' and a.taskid = 'addantrean' and a.code in ('200', '208')), 'Sudah', '') as antrean, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '1'), 'Sudah', '') as ada_task1, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '2'), 'Sudah', '') as ada_task2, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '3'), 'Sudah', '') as ada_task3, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '4'), 'Sudah', '') as ada_task4, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '5'), 'Sudah', '') as ada_task5, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '6'), 'Sudah', '') as ada_task6, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '7'), 'Sudah', '') as ada_task7, " +
                        "if(exists(select * from referensi_mobilejkn_bpjs_taskid t where t.no_rawat = r.no_rawat and t.taskid = '99'), 'Sudah', '') as ada_task99 " +
                        "from reg_periksa r join pasien px on r.no_rkm_medis = px.no_rkm_medis join poliklinik p on r.kd_poli = p.kd_poli join dokter d on " +
                        "r.kd_dokter = d.kd_dokter join maping_poli_bpjs mp on r.kd_poli = mp.kd_poli_rs join maping_dokter_dpjpvclaim md on r.kd_dokter = md.kd_dokter " +
                        "where r.tgl_registrasi between ? and ? and not exists(select * from referensi_mobilejkn_bpjs m where m.no_rawat = r.no_rawat)"
                    )) {
                        ps.setString(1, tgl.format(Tanggal1.getDate()));
                        ps.setString(2, tgl.format(Tanggal1.getDate()));
                        try (ResultSet rs = ps.executeQuery()) {
                            while (rs.next()) {
                                try (PreparedStatement ps2 = koneksi.prepareStatement("select * from jadwal j where j.kd_dokter = ? and j.hari_kerja = ? and j.kd_poli = ?")) {
                                    ps2.setString(1, rs.getString("kd_dokter"));
                                    ps2.setString(2, getHari(rs.getInt("hari")));
                                    ps2.setString(3, rs.getString("kd_poli"));
                                    try (ResultSet rs2 = ps2.executeQuery()) {
                                        if (rs2.next()) {
                                            antrean = rs.getString("antrean");
                                            task1 = rs.getString("ada_task1");
                                            task2 = rs.getString("ada_task2");
                                            task3 = rs.getString("ada_task3");
                                            task4 = rs.getString("ada_task4");
                                            task5 = rs.getString("ada_task5");
                                            task6 = rs.getString("ada_task6");
                                            task7 = rs.getString("ada_task7");
                                            task99 = rs.getString("ada_task99");
                                            TeksArea.append("Menjalankan WS tambah antrian pasien BPJS onsite / non JKN\n");
                                            if (antrean.equals("") && !rs.getString("kd_pj").equals(kodebpjs)) {
                                                date = Sequel.cariTglSmc("select date_add(concat(?, ' ', ?), interval ? * 5 minute)", rs.getString("tgl_registrasi"), rs2.getString("jam_mulai"), String.valueOf(rs.getInt("no_reg")));
                                                if (date != null) {
                                                    waktu = dtf.format(date);
                                                    json = mapper.createObjectNode();
                                                    json.put("kodebooking", rs.getString("no_rawat"));
                                                    json.put("jenispasien", "NON JKN");
                                                    json.put("nomorkartu", "");
                                                    json.put("nik", rs.getString("no_ktp"));
                                                    json.put("nohp", rs.getString("no_tlp"));
                                                    json.put("kodepoli", rs.getString("kd_poli_bpjs"));
                                                    json.put("namapoli", rs.getString("nm_poli"));
                                                    json.put("pasienbaru", rs.getString("stts_daftar").equals("Baru") ? 1 : 0);
                                                    json.put("norm", rs.getString("no_rkm_medis"));
                                                    json.put("tanggalperiksa", rs.getString("tgl_registrasi"));
                                                    json.put("kodedokter", rs.getInt("kd_dokter_bpjs"));
                                                    json.put("namadokter", rs.getString("nm_dokter"));
                                                    json.put("jampraktek", rs2.getString("jam_mulai").substring(0, 5) + "-" + rs2.getString("jam_selesai").substring(0, 5));
                                                    json.put("jeniskunjungan", 3);
                                                    json.put("nomorreferensi", "");
                                                    json.put("nomorantrean", rs.getString("no_reg"));
                                                    json.put("angkaantrean", rs.getInt("no_reg"));
                                                    json.put("estimasidilayani", date.getTime());
                                                    json.put("sisakuotajkn", rs2.getInt("kuota") - rs.getInt("no_reg"));
                                                    json.put("kuotajkn", rs2.getInt("kuota"));
                                                    json.put("sisakuotanonjkn", rs2.getInt("kuota") - rs.getInt("no_reg"));
                                                    json.put("kuotanonjkn", rs2.getInt("kuota"));
                                                    json.put("keterangan", "Peserta harap 30 menit lebih awal guna pencatatan administrasi.");
                                                    requestJson = json.toString();
                                                    try {
                                                        headers = new HttpHeaders();
                                                        headers.setContentType(MediaType.APPLICATION_JSON);
                                                        headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                        utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                        headers.add("x-timestamp", utc);
                                                        headers.add("x-signature", api.getHmac(utc));
                                                        headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                        TeksArea.append("JSON : " + requestJson + "\n");
                                                        requestEntity = new HttpEntity(requestJson, headers);
                                                        url = link + "/antrean/add";
                                                        System.out.print("addantrean " + rs.getString("no_rawat") + " : ");
                                                        root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                        metadata = root.path("metadata");
                                                        System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                        TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                        Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "addantrean", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                        if (metadata.path("code").asText().equals("200")) {
                                                            antrean = "Sudah";
                                                        }
                                                    } catch (HttpClientErrorException e) {
                                                        antrean = "";
                                                        System.out.println("Notif : " + e.getMessage());
                                                        Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "addantrean", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                    } catch (HttpServerErrorException e) {
                                                        antrean = "";
                                                        System.out.println("Notif : " + e.getMessage());
                                                        Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "addantrean", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                    } catch (Exception e) {
                                                        antrean = "";
                                                        System.out.println("Notif : " + e);
                                                    }
                                                }
                                            }

                                            if (antrean.equals("Sudah")) {
                                                if (task99.equals("")) {
                                                    date = Sequel.cariTglSmc("select concat(reg_periksa.tgl_registrasi, ' 23:59:59.999') from reg_periksa where reg_periksa.no_rawat = ? and reg_periksa.stts = 'Batal'", rs.getString("no_rawat"));
                                                    if (date != null) {
                                                        waktu = dtf.format(date);
                                                        if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "99", waktu)) {
                                                            json = mapper.createObjectNode();
                                                            json.put("kodebooking", rs.getString("no_rawat"));
                                                            json.put("taskid", "99");
                                                            json.put("waktu", date.getTime());
                                                            requestJson = json.toString();
                                                            task99 = "Sudah";
                                                            try {
                                                                TeksArea.append("Menjalankan WS taskid batal pelayanan poli antrian pasien BPJS onsite / non JKN\n");
                                                                headers = new HttpHeaders();
                                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                headers.add("x-timestamp", utc);
                                                                headers.add("x-signature", api.getHmac(utc));
                                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                                requestEntity = new HttpEntity(requestJson, headers);
                                                                url = link + "/antrean/updatewaktu";
                                                                System.out.print("taskid99 " + rs.getString("nobooking") + " : ");
                                                                root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                metadata = root.path("metadata");
                                                                System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "99", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                if (!metadata.path("code").asText().equals("200")) {
                                                                    task99 = "";
                                                                    Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '99' and no_rawat = ?", rs.getString("no_rawat"));
                                                                }
                                                                TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                            } catch (HttpClientErrorException e) {
                                                                task99 = "";
                                                                System.out.println("Notif : " + e.getMessage());
                                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "99", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                            } catch (HttpServerErrorException e) {
                                                                task99 = "";
                                                                System.out.println("Notif : " + e.getMessage());
                                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "99", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                            } catch (Exception e) {
                                                                task99 = "";
                                                                System.out.println("Notif : " + e);
                                                            }
                                                        }
                                                    }
                                                }

                                                if (task99.equals("")) {
                                                    if (task1.equals("")) {
                                                        date = Sequel.cariTglSmc("select concat(a.tanggal, ' ', a.jam) from antriloketcetak_smc a where a.no_rawat = ? and a.jam is not null", rs.getString("no_rawat"));
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "1", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "1");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task1 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid mulai tunggu admission antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid1 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "1", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task1 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '1' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task1 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "1", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task1 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "1", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task1 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (task1.equals("Sudah") && task2.equals("")) {
                                                        date = Sequel.cariTglSmc("select concat(a.tanggal, ' ', a.jam_panggil) from antriloketcetak_smc a where a.no_rawat = ? and a.jam_panggil is not null", rs.getString("no_rawat"));
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "2", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "2");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task2 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid mulai pelayanan admission antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid2 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "2", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task2 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '2' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task2 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "2", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task2 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "2", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task2 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (task3.equals("")) {
                                                        date = Sequel.cariTglSmc("select if(m.dikirim = '0000-00-00 00:00:00.000', '', m.dikirim) from mutasi_berkas m where m.no_rawat = ?", rs.getString("no_rawat"));
                                                        if (date == null && !rs.getString("kd_pj").equals(kodebpjs)) {
                                                            date = Sequel.cariTglSmc("select concat(r.tgl_registrasi, ' ', r.jam_reg) from reg_periksa r where r.no_rawat = ?", rs2.getString("jam_mulai"), rs2.getString("jam_mulai"), rs.getString("no_rawat"));
                                                        }
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "3", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "3");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task3 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid mulai tunggu poli antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid3 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "3", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task3 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '3' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task3 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "3", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task3 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "3", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task3 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (task3.equals("Sudah") && task4.equals("")) {
                                                        date = Sequel.cariTglSmc("select if(m.diterima = '0000-00-00 00:00:00.000', '', m.diterima) from mutasi_berkas m where m.no_rawat = ?", rs.getString("no_rawat"));
                                                        if (date == null) {
                                                            date = Sequel.cariTglSmc("select concat(p.tgl_perawatan, ' ', p.jam_rawat) from pemeriksaan_ralan p where p.no_rawat = ? and p.nip = ?", rs.getString("no_rawat"), rs.getString("kd_dokter"));
                                                        }
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "4", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "4");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task4 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid mulai tunggu poli antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid4 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "4", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task4 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '4' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task4 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "4", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task4 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "4", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task4 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (task4.equals("Sudah") && task5.equals("")) {
                                                        date = Sequel.cariTglSmc("select if(m.kembali = '0000-00-00 00:00:00', '', m.kembali) from mutasi_berkas m where m.no_rawat = ?", rs.getString("no_rawat"));
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "5", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "5");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task5 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid selesai pelayanan poli antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid5 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "5", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task5 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '5' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task5 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "5", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task5 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "5", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task5 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (task5.equals("Sudah") && task6.equals("")) {
                                                        noresep = Sequel.cariIsiSmc("select resep_obat.no_resep from resep_obat where resep_obat.no_rawat = ?", rs.getString("no_rawat"));
                                                        if (!noresep.equals("") && !Sequel.cariExistsSmc("select * from referensi_mobilejkn_bpjs_taskid_response2 r where r.kodebooking = ? and r.jenispasien = 'Onsite' and " + "r.taskid = 'addantreanfarmasi' and r.code in ('200', '208')", rs.getString("no_rawat"))) {
                                                            json = mapper.createObjectNode();
                                                            json.put("kodebooking", rs.getString("no_rawat"));
                                                            json.put("jenisresep", Sequel.cariExistsSmc("select * from resep_dokter_racikan where resep_dokter_racikan.no_resep = ?", noresep) ? "Racikan" : "Non Racikan");
                                                            json.put("nomorantrean", Integer.parseInt(noresep.substring(noresep.length() - 4)));
                                                            json.put("keterangan", "Resep dibuat secara elektronik di poli.");
                                                            requestJson = json.toString();
                                                            try {
                                                                TeksArea.append("Menjalankan WS addantrean antrian pasien BPJS onsite / non JKN\n");
                                                                headers = new HttpHeaders();
                                                                headers.setContentType(MediaType.APPLICATION_JSON);
                                                                headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                headers.add("x-timestamp", utc);
                                                                headers.add("x-signature", api.getHmac(utc));
                                                                headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                TeksArea.append("JSON : " + requestJson + "\n");
                                                                requestEntity = new HttpEntity(requestJson, headers);
                                                                url = link + "/antrean/farmasi/add";
                                                                System.out.print("addantreanfarmasi " + rs.getString("no_rawat") + " : ");
                                                                root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                metadata = root.path("metadata");
                                                                System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "addantreanfarmasi", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), null);
                                                                TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                            } catch (HttpClientErrorException e) {
                                                                System.out.println("Notif : " + e.getMessage());
                                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "addantreanfarmasi", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), null);
                                                            } catch (HttpServerErrorException e) {
                                                                System.out.println("Notif : " + e.getMessage());
                                                                Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "addantreanfarmasi", requestJson, e.getStatusCode().toString(), e.getMessage(), "", null);
                                                            } catch (Exception e) {
                                                                System.out.println("Notif : " + e);
                                                            }
                                                        }

                                                        date = Sequel.cariTglSmc("select concat(resep_obat.tgl_perawatan, ' ', resep_obat.jam) from resep_obat where resep_obat.no_rawat = ? and resep_obat.tgl_perawatan != '0000-00-00' and resep_obat.status = 'ralan'", rs.getString("no_rawat"));
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "6", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "6");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task6 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid validasi resep poli antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid6 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "6", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task6 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '6' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task6 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "6", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task6 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "6", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task6 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (task6.equals("Sudah") && task7.equals("")) {
                                                        date = Sequel.cariTglSmc("select concat(resep_obat.tgl_penyerahan, ' ', resep_obat.jam_penyerahan) from resep_obat where resep_obat.no_rawat = ? and resep_obat.tgl_perawatan != '0000-00-00' and resep_obat.status = 'ralan'", rs.getString("no_rawat"));
                                                        if (date != null) {
                                                            waktu = dtf.format(date);
                                                            if (Sequel.menyimpantfSmc("referensi_mobilejkn_bpjs_taskid", null, rs.getString("no_rawat"), "7", waktu)) {
                                                                json = mapper.createObjectNode();
                                                                json.put("kodebooking", rs.getString("no_rawat"));
                                                                json.put("taskid", "7");
                                                                json.put("waktu", date.getTime());
                                                                requestJson = json.toString();
                                                                task7 = "Sudah";
                                                                try {
                                                                    TeksArea.append("Menjalankan WS taskid penyerahan resep poli antrian pasien BPJS onsite / non JKN\n");
                                                                    headers = new HttpHeaders();
                                                                    headers.setContentType(MediaType.APPLICATION_JSON);
                                                                    headers.add("x-cons-id", koneksiDB.CONSIDAPIMOBILEJKN());
                                                                    utc = String.valueOf(api.GetUTCdatetimeAsString());
                                                                    headers.add("x-timestamp", utc);
                                                                    headers.add("x-signature", api.getHmac(utc));
                                                                    headers.add("user_key", koneksiDB.USERKEYAPIMOBILEJKN());
                                                                    TeksArea.append("JSON : " + requestJson + "\n");
                                                                    requestEntity = new HttpEntity(requestJson, headers);
                                                                    url = link + "/antrean/updatewaktu";
                                                                    System.out.print("taskid7 " + rs.getString("no_rawat") + " : ");
                                                                    root = mapper.readTree(api.getRest().exchange(url, HttpMethod.POST, requestEntity, String.class).getBody());
                                                                    metadata = root.path("metadata");
                                                                    System.out.println(metadata.path("code").asText() + " " + metadata.path("message").asText());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "7", requestJson, metadata.path("code").asText(), metadata.path("message").asText(), root.toString(), waktu);
                                                                    if (!metadata.path("code").asText().equals("200")) {
                                                                        task7 = "";
                                                                        Sequel.menghapusSmc("referensi_mobilejkn_bpjs_taskid", "taskid = '7' and no_rawat = ?", rs.getString("no_rawat"));
                                                                    }
                                                                    TeksArea.append("respon WS BPJS : " + metadata.path("code").asText() + " " + metadata.path("message").asText() + "\n");
                                                                } catch (HttpClientErrorException e) {
                                                                    task7 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "7", requestJson, e.getStatusCode().toString(), e.getMessage(), e.getResponseBodyAsString(), waktu);
                                                                } catch (HttpServerErrorException e) {
                                                                    task7 = "";
                                                                    System.out.println("Notif : " + e.getMessage());
                                                                    Sequel.logTaskid(rs.getString("no_rawat"), rs.getString("no_rawat"), "Onsite", "7", requestJson, e.getStatusCode().toString(), e.getMessage(), "", waktu);
                                                                } catch (Exception e) {
                                                                    task7 = "";
                                                                    System.out.println("Notif : " + e);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        System.out.println("Notif : " + e);
                    }
                }
            }

            private String getHari(int day) {
                switch (day) {
                    case 1: return "AKHAD";
                    case 2: return "SENIN";
                    case 3: return "SELASA";
                    case 4: return "RABU";
                    case 5: return "KAMIS";
                    case 6: return "JUMAT";
                    case 7: return "SABTU";
                    default: return "";
                }
            }
        };
        // Timer
        new Timer(1000, taskPerformer).start();
    }
}
