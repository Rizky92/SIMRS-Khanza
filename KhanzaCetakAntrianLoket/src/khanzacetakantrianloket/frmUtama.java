/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanzacetakantrianloket;

import fungsi.akses;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Timer;

/**
 *
 * @author windiartonugroho
 */
public class frmUtama extends javax.swing.JFrame {
    private final Connection koneksi=koneksiDB.condb();
    private final validasi Valid=new validasi();
    private final sekuel Sequel=new sekuel();
    private PreparedStatement ps;
    private ResultSet rs;
    /**
     * Creates new form frmUtama
     */
    public frmUtama() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        jam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        BtnCetak = new widget.Button();
        LabelNomor = new widget.Label();
        LabelTanggal = new widget.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMKES Khanza Cetak Antrian Loket");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setWarnaAtas(new java.awt.Color(0, 50, 0));
        internalFrame1.setWarnaBawah(new java.awt.Color(0, 130, 0));
        internalFrame1.setLayout(new java.awt.BorderLayout());

        BtnCetak.setForeground(new java.awt.Color(255, 255, 51));
        BtnCetak.setText("Cetak");
        BtnCetak.setFont(new java.awt.Font("Tahoma", 1, 80)); // NOI18N
        BtnCetak.setGlassColor(new java.awt.Color(255, 255, 204));
        BtnCetak.setPreferredSize(new java.awt.Dimension(158, 125));
        BtnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCetakActionPerformed(evt);
            }
        });
        internalFrame1.add(BtnCetak, java.awt.BorderLayout.PAGE_END);

        LabelNomor.setForeground(new java.awt.Color(255, 255, 255));
        LabelNomor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNomor.setText("001");
        LabelNomor.setFont(new java.awt.Font("Tahoma", 0, 350)); // NOI18N
        internalFrame1.add(LabelNomor, java.awt.BorderLayout.CENTER);

        LabelTanggal.setForeground(new java.awt.Color(255, 255, 51));
        LabelTanggal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelTanggal.setText("Antrian Loket Pendaftaran Tanggal :");
        LabelTanggal.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        internalFrame1.add(LabelTanggal, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCetakActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (Sequel.executeRawSmc("insert into antriloketcetak_smc (nomor, tanggal, jam) values (?, current_date(), current_time())", String.valueOf(Integer.parseInt(LabelNomor.getText())))) {
            Map<String, Object> param = new HashMap<>();
            param.put("namars",akses.getnamars());
            param.put("alamatrs",akses.getalamatrs());
            param.put("kotars",akses.getkabupatenrs());
            param.put("propinsirs",akses.getpropinsirs());
            param.put("kontakrs",akses.getkontakrs());
            param.put("emailrs",akses.getemailrs());
            Valid.printReportQuerySmc("rptAntriLoket.jasper", "report", "::[ Antrian Loket ]::", param, koneksiDB.PRINTERCETAKANTREAN(), 1,
                "select date_format(tanggal, '%d-%m-%Y') as tanggal, lpad(nomor, greatest(length(nomor), 3), '0') as nomor, jam from antriloketcetak_smc where nomor = ? and tanggal = current_date()",
                String.valueOf(Integer.parseInt(LabelNomor.getText()))
            );
            autonomer();
        } else {
            autonomer();
            if (Sequel.executeRawSmc("insert into antriloketcetak_smc (nomor, tanggal, jam) values (?, current_date(), current_time())", String.valueOf(Integer.parseInt(LabelNomor.getText())))) {
                Map<String, Object> param = new HashMap<>();
                param.put("namars",akses.getnamars());
                param.put("alamatrs",akses.getalamatrs());
                param.put("kotars",akses.getkabupatenrs());
                param.put("propinsirs",akses.getpropinsirs());
                param.put("kontakrs",akses.getkontakrs());
                param.put("emailrs",akses.getemailrs());
                Valid.printReportQuerySmc("rptAntriLoket.jasper", "report", "::[ Antrian Loket ]::", param, koneksiDB.PRINTERCETAKANTREAN(), 1,
                    "select date_format(tanggal, '%d-%m-%Y') as tanggal, lpad(nomor, greatest(length(nomor), 3), '0') as nomor, jam from antriloketcetak_smc where nomor = ? and tanggal = current_date()",
                    String.valueOf(Integer.parseInt(LabelNomor.getText()))
                );
                autonomer();
            } else {
                autonomer();
                if (Sequel.executeRawSmc("insert into antriloketcetak_smc (nomor, tanggal, jam) values (?, current_date(), current_time())", String.valueOf(Integer.parseInt(LabelNomor.getText())))) {
                    Map<String, Object> param = new HashMap<>();
                    param.put("namars",akses.getnamars());
                    param.put("alamatrs",akses.getalamatrs());
                    param.put("kotars",akses.getkabupatenrs());
                    param.put("propinsirs",akses.getpropinsirs());
                    param.put("kontakrs",akses.getkontakrs());
                    param.put("emailrs",akses.getemailrs());
                    Valid.printReportQuerySmc("rptAntriLoket.jasper", "report", "::[ Antrian Loket ]::", param, koneksiDB.PRINTERCETAKANTREAN(), 1,
                        "select date_format(tanggal, '%d-%m-%Y') as tanggal, lpad(nomor, greatest(length(nomor), 3), '0') as nomor, jam from antriloketcetak_smc where nomor = ? and tanggal = current_date()",
                        String.valueOf(Integer.parseInt(LabelNomor.getText()))
                    );
                    autonomer();
                }
            }
        }
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_BtnCetakActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        autonomer();
        try{            
            ps=koneksi.prepareStatement("select nama_instansi, alamat_instansi, kabupaten, propinsi, aktifkan, wallpaper,kontak,email,logo from setting");
            try {
                rs=ps.executeQuery();
                while(rs.next()){
                    akses.setnamars(rs.getString("nama_instansi"));
                    akses.setalamatrs(rs.getString("alamat_instansi"));
                    akses.setkabupatenrs(rs.getString("kabupaten"));
                    akses.setpropinsirs(rs.getString("propinsi"));
                    akses.setkontakrs(rs.getString("kontak"));
                    akses.setemailrs(rs.getString("email"));
                }  
            } catch (Exception e) {
                System.out.println(e);
            } finally{
                if(rs!=null){
                    rs.close();
                }
                if(ps!=null){
                    ps.close();
                }
            }                 
        }catch(Exception e){
            System.out.println("Notifikasi : Silahkan Set Aplikasi "+e);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnCetak;
    private widget.Label LabelNomor;
    private widget.Label LabelTanggal;
    private widget.InternalFrame internalFrame1;
    // End of variables declaration//GEN-END:variables
    private void jam() {
        ActionListener taskPerformer = (ActionEvent e) -> {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
            String dt = dtf.format(LocalDateTime.now());
            String menit = dt.substring(14, 16),
                   detik = dt.substring(17, 19);
            LabelTanggal.setText("Antrian Loket Pendaftaran Tanggal : " + dt);
            if (menit.equals("01") && detik.equals("01")) {
                autonomer();
            }
        };
        new Timer(1000, taskPerformer).start();
    }
    
    private void autonomer(){
        LabelNomor.setText(Sequel.cariIsiSmc("select lpad(ifnull(max(convert(nomor, signed)), 0) + 1, greatest(length(ifnull(max(nomor), 0) + 1), 3), '0') from antriloketcetak_smc where tanggal = current_date()"));
    }
}
