/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * DlgAdmin.java
 *
 * Created on 21 Jun 10, 20:53:44
 */
package setting;

import fungsi.WarnaTable;
import fungsi.batasInput;
import fungsi.koneksiDB;
import fungsi.sekuel;
import fungsi.validasi;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import kepegawaian.DlgCariDokter;
import org.apache.poi.hslf.blip.Bitmap;
import sun.jvm.hotspot.utilities.BitMap;

/**
 *
 * @author perpustakaan
 */
public class DlgSetPenjabUnitSmc extends javax.swing.JDialog {
    private final DefaultTableModel tabMode;
    private final Connection koneksi = koneksiDB.condb();
    private final sekuel Sequel = new sekuel();
    private final validasi Valid = new validasi();
    private final DlgCariDokter dokter = new DlgCariDokter(null, false);
    private String labpk, labpa, labmb, rad, hdl, utd, pathGambar;

    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
    private JFileChooser jfc = new JFileChooser();
    private FileFilter jpgFilter = new FileNameExtensionFilter("Gambar JPEG", "jpg");
    private FileFilter gifFilter = new FileNameExtensionFilter("Gambar GIF", "gif");
    private FileFilter pngFilter = new FileNameExtensionFilter("Gambar PNG", "png");
    private FileFilter bothFilter = new FileNameExtensionFilter("Gambar JPEG dan GIF dan PNG", "jpg", "gif", "png");

    /**
     * Creates new form DlgAdmin
     *
     * @param parent
     * @param modal
     */
    public DlgSetPenjabUnitSmc(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        tabMode = new DefaultTableModel(null, new Object[] {
            "Kode Dokter", "Nama P.J.", "Unit P.J.", "TTD?"
        }) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };

        tbAdmin.setModel(tabMode);
        tbAdmin.setPreferredScrollableViewportSize(new Dimension(500, 500));
        tbAdmin.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int i = 0; i < 4; i++) {
            TableColumn column = tbAdmin.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(80);
            } else if (i == 1) {
                column.setPreferredWidth(220);
            } else if (i == 2) {
                column.setPreferredWidth(120);
            } else if (i == 3) {
                column.setPreferredWidth(80);
            }
        }

        tbAdmin.setDefaultRenderer(Object.class, new WarnaTable());
        kddokter.setDocument(new batasInput((byte) 20).getKata(kddokter));

        dokter.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                if (dokter.getTable().getSelectedRow() != -1) {
                    kddokter.setText(dokter.getTable().getValueAt(dokter.getTable().getSelectedRow(), 0).toString());
                    TDokter.setText(dokter.getTable().getValueAt(dokter.getTable().getSelectedRow(), 1).toString());
                    kddokter.requestFocus();
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbAdmin = new widget.Table();
        PanelInput = new widget.panelisi();
        FormInput = new widget.PanelBiasa();
        jLabel13 = new widget.Label();
        kddokter = new widget.TextBox();
        TDokter = new widget.TextBox();
        BtnDokter = new widget.Button();
        label37 = new widget.Label();
        BtnCariTTD = new widget.Button();
        PhotoTTD = new Painter();
        label12 = new widget.Label();
        UnitPJ = new widget.ComboBox();
        ChkInput = new widget.CekBox();
        panelGlass5 = new widget.panelisi();
        BtnSimpan = new widget.Button();
        BtnBatal = new widget.Button();
        BtnEdit = new widget.Button();
        BtnHapus = new widget.Button();
        BtnAll = new widget.Button();
        BtnKeluar = new widget.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Setup Penanggung Jawab Unit Penunjang ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);

        tbAdmin.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbAdmin.setName("tbAdmin"); // NOI18N
        tbAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAdminMouseClicked(evt);
            }
        });
        tbAdmin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbAdminKeyPressed(evt);
            }
        });
        Scroll.setViewportView(tbAdmin);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        PanelInput.setName("PanelInput"); // NOI18N
        PanelInput.setPreferredSize(new java.awt.Dimension(44, 272));
        PanelInput.setLayout(new java.awt.BorderLayout());

        FormInput.setName("FormInput"); // NOI18N
        FormInput.setLayout(null);

        jLabel13.setText("Nama P. J. :");
        jLabel13.setName("jLabel13"); // NOI18N
        FormInput.add(jLabel13);
        jLabel13.setBounds(0, 12, 98, 23);

        kddokter.setHighlighter(null);
        kddokter.setName("kddokter"); // NOI18N
        kddokter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                kddokterKeyPressed(evt);
            }
        });
        FormInput.add(kddokter);
        kddokter.setBounds(102, 12, 95, 23);

        TDokter.setEditable(false);
        TDokter.setName("TDokter"); // NOI18N
        FormInput.add(TDokter);
        TDokter.setBounds(201, 12, 264, 23);

        BtnDokter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/190.png"))); // NOI18N
        BtnDokter.setMnemonic('3');
        BtnDokter.setToolTipText("ALt+3");
        BtnDokter.setName("BtnDokter"); // NOI18N
        BtnDokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDokterActionPerformed(evt);
            }
        });
        FormInput.add(BtnDokter);
        BtnDokter.setBounds(469, 12, 28, 23);

        label37.setText("Gambar TTD :");
        label37.setName("label37"); // NOI18N
        label37.setPreferredSize(new java.awt.Dimension(35, 23));
        FormInput.add(label37);
        label37.setBounds(0, 72, 98, 23);

        BtnCariTTD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/190.png"))); // NOI18N
        BtnCariTTD.setMnemonic('C');
        BtnCariTTD.setToolTipText("Alt+C");
        BtnCariTTD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BtnCariTTD.setName("BtnCariTTD"); // NOI18N
        BtnCariTTD.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnCariTTD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariTTDActionPerformed(evt);
            }
        });
        FormInput.add(BtnCariTTD);
        BtnCariTTD.setBounds(70, 102, 28, 23);

        PhotoTTD.setBackground(new java.awt.Color(245, 255, 235));
        PhotoTTD.setForeground(new java.awt.Color(235, 255, 235));
        PhotoTTD.setName("PhotoTTD"); // NOI18N
        FormInput.add(PhotoTTD);
        PhotoTTD.setBounds(102, 72, 180, 170);

        label12.setText("Unit P. J. :");
        label12.setName("label12"); // NOI18N
        label12.setPreferredSize(new java.awt.Dimension(70, 23));
        FormInput.add(label12);
        label12.setBounds(0, 42, 98, 23);

        UnitPJ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Laboratorium PK", "Radiologi", "Hemodialisa", "Unit Transfusi Darah", "Laboratorium PA", "Laboratorium MB" }));
        UnitPJ.setName("UnitPJ"); // NOI18N
        UnitPJ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UnitPJKeyPressed(evt);
            }
        });
        FormInput.add(UnitPJ);
        UnitPJ.setBounds(102, 42, 180, 23);

        PanelInput.add(FormInput, java.awt.BorderLayout.CENTER);

        ChkInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setMnemonic('I');
        ChkInput.setText(".: Input Data");
        ChkInput.setToolTipText("Alt+I");
        ChkInput.setBorderPainted(true);
        ChkInput.setBorderPaintedFlat(true);
        ChkInput.setFocusable(false);
        ChkInput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkInput.setName("ChkInput"); // NOI18N
        ChkInput.setPreferredSize(new java.awt.Dimension(192, 20));
        ChkInput.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkInputActionPerformed(evt);
            }
        });
        PanelInput.add(ChkInput, java.awt.BorderLayout.PAGE_END);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_START);

        panelGlass5.setName("panelGlass5"); // NOI18N
        panelGlass5.setPreferredSize(new java.awt.Dimension(55, 55));
        panelGlass5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setText("Simpan");
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setName("BtnSimpan"); // NOI18N
        BtnSimpan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        BtnSimpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnSimpanKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnSimpan);

        BtnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Cancel-2-16x16.png"))); // NOI18N
        BtnBatal.setMnemonic('B');
        BtnBatal.setText("Baru");
        BtnBatal.setToolTipText("Alt+B");
        BtnBatal.setIconTextGap(3);
        BtnBatal.setName("BtnBatal"); // NOI18N
        BtnBatal.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBatalActionPerformed(evt);
            }
        });
        BtnBatal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnBatalKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnBatal);

        BtnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/inventaris.png"))); // NOI18N
        BtnEdit.setMnemonic('G');
        BtnEdit.setText("Ganti");
        BtnEdit.setToolTipText("Alt+G");
        BtnEdit.setIconTextGap(3);
        BtnEdit.setName("BtnEdit"); // NOI18N
        BtnEdit.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEditActionPerformed(evt);
            }
        });
        BtnEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnEditKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnEdit);

        BtnHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/stop_f2.png"))); // NOI18N
        BtnHapus.setMnemonic('H');
        BtnHapus.setText("Hapus");
        BtnHapus.setToolTipText("Alt+H");
        BtnHapus.setIconTextGap(3);
        BtnHapus.setName("BtnHapus"); // NOI18N
        BtnHapus.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHapusActionPerformed(evt);
            }
        });
        BtnHapus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnHapusKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnHapus);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setText("Semua");
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnAll);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setIconTextGap(3);
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass5.add(BtnKeluar);

        internalFrame1.add(panelGlass5, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
        if (TDokter.getText().trim().equals("") || kddokter.getText().trim().equals("")) {
            Valid.textKosong(kddokter, "Nama P.J.");
        } else {
            try (ResultSet rs = koneksi.createStatement().executeQuery("select * from set_pjlab")) {
                if (rs.next()) {
                    labpk = (rs.getString(1) == null || rs.getString(1).isBlank()) ? "-" : rs.getString(1);
                    rad = (rs.getString(2) == null || rs.getString(2).isBlank()) ? "-" : rs.getString(2);
                    hdl = (rs.getString(3) == null || rs.getString(3).isBlank()) ? "-" : rs.getString(3);
                    utd = (rs.getString(4) == null || rs.getString(4).isBlank()) ? "-" : rs.getString(4);
                    labpa = (rs.getString(5) == null || rs.getString(5).isBlank()) ? "-" : rs.getString(5);
                    labmb = (rs.getString(6) == null || rs.getString(6).isBlank()) ? "-" : rs.getString(6);
                }
            } catch (Exception e) {
                System.out.println("Notif : " + e);
            }
            Sequel.menghapusSmc("set_pjlab");
            switch (UnitPJ.getSelectedIndex()) {
                case 0:
                    if (!labpk.equals("-")) {
                        Sequel.menyimpanSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, labmb);
                        JOptionPane.showMessageDialog(null, "Maaf, P.J. unit sudah ada...!!!");
                        emptTeks();
                    } else if (Sequel.menyimpantfSmc("set_pjlab", "", kddokter.getText(), rad, hdl, utd, labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 0, 0);
                        tabMode.setValueAt(TDokter.getText(), 0, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 0, 3);
                    }
                    break;
                case 1:
                    if (!rad.equals("-")) {
                        Sequel.menyimpanSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, labmb);
                        JOptionPane.showMessageDialog(null, "Maaf, P.J. unit sudah ada...!!!");
                        emptTeks();
                    } else if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, kddokter.getText(), hdl, utd, labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 1, 0);
                        tabMode.setValueAt(TDokter.getText(), 1, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 1, 3);
                    }
                    break;
                case 2:
                    if (!hdl.equals("-")) {
                        Sequel.menyimpanSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, labmb);
                        JOptionPane.showMessageDialog(null, "Maaf, P.J. unit sudah ada...!!!");
                        emptTeks();
                    } else if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, kddokter.getText(), utd, labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 2, 0);
                        tabMode.setValueAt(TDokter.getText(), 2, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 2, 3);
                    }
                    break;
                case 3:
                    if (!utd.equals("-")) {
                        Sequel.menyimpanSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, labmb);
                        JOptionPane.showMessageDialog(null, "Maaf, P.J. unit sudah ada...!!!");
                        emptTeks();
                    } else if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, kddokter.getText(), labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 3, 0);
                        tabMode.setValueAt(TDokter.getText(), 3, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 3, 3);
                    }
                    break;
                case 4:
                    if (!labpa.equals("-")) {
                        Sequel.menyimpanSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, labmb);
                        JOptionPane.showMessageDialog(null, "Maaf, P.J. unit sudah ada...!!!");
                        emptTeks();
                    } else if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, utd, kddokter.getText(), labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 4, 0);
                        tabMode.setValueAt(TDokter.getText(), 4, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 4, 3);
                    }
                    break;
                case 5:
                    if (!labmb.equals("-")) {
                        Sequel.menyimpanSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, labmb);
                        JOptionPane.showMessageDialog(null, "Maaf, P.J. unit sudah ada...!!!");
                        emptTeks();
                    } else if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, kddokter.getText())) {
                        tabMode.setValueAt(kddokter.getText(), 5, 0);
                        tabMode.setValueAt(TDokter.getText(), 5, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 5, 3);
                    }
                    break;
                default:
                    break;
            }
            simpanGambar();
            emptTeks();
        }
}//GEN-LAST:event_BtnSimpanActionPerformed

    private void BtnSimpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnSimpanKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnSimpanActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnCariTTD, BtnBatal);
        }
}//GEN-LAST:event_BtnSimpanKeyPressed

    private void BtnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBatalActionPerformed
        emptTeks();
}//GEN-LAST:event_BtnBatalActionPerformed

    private void BtnBatalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnBatalKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            emptTeks();
        } else {
            Valid.pindah(evt, BtnSimpan, BtnHapus);
        }
}//GEN-LAST:event_BtnBatalKeyPressed

    private void BtnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHapusActionPerformed
        try (ResultSet rs = koneksi.createStatement().executeQuery("select * from set_pjlab")) {
            if (rs.next()) {
                labpk = (rs.getString(1) == null || rs.getString(1).isBlank()) ? "-" : rs.getString(1);
                rad = (rs.getString(2) == null || rs.getString(2).isBlank()) ? "-" : rs.getString(2);
                hdl = (rs.getString(3) == null || rs.getString(3).isBlank()) ? "-" : rs.getString(3);
                utd = (rs.getString(4) == null || rs.getString(4).isBlank()) ? "-" : rs.getString(4);
                labpa = (rs.getString(5) == null || rs.getString(5).isBlank()) ? "-" : rs.getString(5);
                labmb = (rs.getString(6) == null || rs.getString(6).isBlank()) ? "-" : rs.getString(6);
            }
        } catch (Exception e) {
            System.out.println("Notif : " + e);
        }
        Sequel.menghapusSmc("set_pjlab");
        switch (UnitPJ.getSelectedIndex()) {
            case 0:
                if (Sequel.menyimpantfSmc("set_pjlab", "", "-", rad, hdl, utd, labpa, labmb)) {
                    tabMode.setValueAt("-", 0, 0);
                    tabMode.setValueAt("-", 0, 1);
                    // wip
                    tabMode.setValueAt("Tidak Ada", 0, 3);
                }
                break;
            case 1:
                if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, "-", hdl, utd, labpa, labmb)) {
                    tabMode.setValueAt("-", 1, 0);
                    tabMode.setValueAt("-", 1, 1);
                    // wip
                    tabMode.setValueAt("Tidak Ada", 1, 3);
                }
                break;
            case 2:
                if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, "-", utd, labpa, labmb)) {
                    tabMode.setValueAt("-", 2, 0);
                    tabMode.setValueAt("-", 2, 1);
                    // wip
                    tabMode.setValueAt("Tidak Ada", 2, 3);
                }
                break;
            case 3:
                if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, "-", labpa, labmb)) {
                    tabMode.setValueAt("-", 3, 0);
                    tabMode.setValueAt("-", 3, 1);
                    // wip
                    tabMode.setValueAt("Tidak Ada", 3, 3);
                }
                break;
            case 4:
                if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, utd, "-", labmb)) {
                    tabMode.setValueAt("-", 4, 0);
                    tabMode.setValueAt("-", 4, 1);
                    // wip
                    tabMode.setValueAt("Tidak Ada", 4, 3);
                }
                break;
            case 5:
                if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, "-")) {
                    tabMode.setValueAt("-", 5, 0);
                    tabMode.setValueAt("-", 5, 1);
                    // wip
                    tabMode.setValueAt("Tidak Ada", 5, 3);
                }
                break;
            default:
                break;
        }
        emptTeks();
}//GEN-LAST:event_BtnHapusActionPerformed

    private void BtnHapusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnHapusKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnHapusActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnBatal, BtnEdit);
        }
}//GEN-LAST:event_BtnHapusKeyPressed

    private void BtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEditActionPerformed
        if (TDokter.getText().trim().equals("") || kddokter.getText().trim().equals("")) {
            Valid.textKosong(kddokter, "Nama P.J.");
        } else {
            try (ResultSet rs = koneksi.createStatement().executeQuery("select * from set_pjlab")) {
                if (rs.next()) {
                    labpk = (rs.getString(1) == null || rs.getString(1).isBlank()) ? "-" : rs.getString(1);
                    rad = (rs.getString(2) == null || rs.getString(2).isBlank()) ? "-" : rs.getString(2);
                    hdl = (rs.getString(3) == null || rs.getString(3).isBlank()) ? "-" : rs.getString(3);
                    utd = (rs.getString(4) == null || rs.getString(4).isBlank()) ? "-" : rs.getString(4);
                    labpa = (rs.getString(5) == null || rs.getString(5).isBlank()) ? "-" : rs.getString(5);
                    labmb = (rs.getString(6) == null || rs.getString(6).isBlank()) ? "-" : rs.getString(6);
                }
            } catch (Exception e) {
                System.out.println("Notif : " + e);
            }
            Sequel.menghapusSmc("set_pjlab");
            switch (UnitPJ.getSelectedIndex()) {
                case 0:
                    if (Sequel.menyimpantfSmc("set_pjlab", "", kddokter.getText(), rad, hdl, utd, labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 0, 0);
                        tabMode.setValueAt(TDokter.getText(), 0, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 0, 3);
                    }
                    break;
                case 1:
                    if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, kddokter.getText(), hdl, utd, labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 1, 0);
                        tabMode.setValueAt(TDokter.getText(), 1, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 1, 3);
                    }
                    break;
                case 2:
                    if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, kddokter.getText(), utd, labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 2, 0);
                        tabMode.setValueAt(TDokter.getText(), 2, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 2, 3);
                    }
                    break;
                case 3:
                    if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, kddokter.getText(), labpa, labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 3, 0);
                        tabMode.setValueAt(TDokter.getText(), 3, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 3, 3);
                    }
                    break;
                case 4:
                    if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, utd, kddokter.getText(), labmb)) {
                        tabMode.setValueAt(kddokter.getText(), 4, 0);
                        tabMode.setValueAt(TDokter.getText(), 4, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 4, 3);
                    }
                    break;
                case 5:
                    if (Sequel.menyimpantfSmc("set_pjlab", "", labpk, rad, hdl, utd, labpa, kddokter.getText())) {
                        tabMode.setValueAt(kddokter.getText(), 5, 0);
                        tabMode.setValueAt(TDokter.getText(), 5, 1);
                        // wip
                        tabMode.setValueAt("Tidak Ada", 5, 3);
                    }
                    break;
                default:
                    break;
            }
            simpanGambar();
            emptTeks();
        }
}//GEN-LAST:event_BtnEditActionPerformed

    private void BtnEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnEditKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnEditActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnHapus, BtnKeluar);
        }
}//GEN-LAST:event_BtnEditKeyPressed

    private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
        if (tabMode.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Maaf, data penanggung jawab lab & radiologi tidak boleh kosong ...!!!!");
            kddokter.requestFocus();
        } else if (!(tabMode.getRowCount() == 0)) {
            dispose();
        }
}//GEN-LAST:event_BtnKeluarActionPerformed

    private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            dispose();
        } else {
            Valid.pindah(evt, BtnEdit, BtnKeluar);
        }
}//GEN-LAST:event_BtnKeluarKeyPressed

    private void tbAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAdminMouseClicked
        if (tabMode.getRowCount() != 0) {
            try {
                getData();
            } catch (java.lang.NullPointerException e) {
            }
        }
}//GEN-LAST:event_tbAdminMouseClicked

    private void tbAdminKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbAdminKeyPressed
        if (tabMode.getRowCount() != 0) {
            if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_UP) || (evt.getKeyCode() == KeyEvent.VK_DOWN)) {
                try {
                    getData();
                } catch (java.lang.NullPointerException e) {
                }
            }
        }
}//GEN-LAST:event_tbAdminKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tampil();
    }//GEN-LAST:event_formWindowOpened

    private void kddokterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kddokterKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            TDokter.setText(dokter.tampil3(kddokter.getText()));
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            BtnDokterActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnKeluar, kddokter);
        }
    }//GEN-LAST:event_kddokterKeyPressed

    private void BtnDokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDokterActionPerformed
        dokter.isCek();
        dokter.TCari.requestFocus();
        dokter.setSize(internalFrame1.getWidth() - 20, internalFrame1.getHeight() - 20);
        dokter.setLocationRelativeTo(internalFrame1);
        dokter.setVisible(true);
    }//GEN-LAST:event_BtnDokterActionPerformed

    private void BtnCariTTDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariTTDActionPerformed
        jfc.setAcceptAllFileFilterUsed(false);
        jfc.addChoosableFileFilter(jpgFilter);
        jfc.addChoosableFileFilter(gifFilter);
        jfc.addChoosableFileFilter(pngFilter);
        jfc.addChoosableFileFilter(bothFilter);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            pathGambar = jfc.getSelectedFile().toString();
            //lGambar.setIcon(new ImageIcon(f));
            ((Painter) PhotoTTD).setImage(pathGambar);
        }
    }//GEN-LAST:event_BtnCariTTDActionPerformed

    private void UnitPJKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UnitPJKeyPressed
        Valid.pindah(evt, BtnDokter, BtnCariTTD);
    }//GEN-LAST:event_UnitPJKeyPressed

    private void ChkInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkInputActionPerformed
        isForm();
    }//GEN-LAST:event_ChkInputActionPerformed

    private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
        tampil();
    }//GEN-LAST:event_BtnAllActionPerformed

    private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            BtnAllActionPerformed(null);
        } else {
            Valid.pindah(evt, BtnHapus, BtnKeluar);
        }
    }//GEN-LAST:event_BtnAllKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            DlgSetPenjabUnitSmc dialog = new DlgSetPenjabUnitSmc(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.Button BtnAll;
    private widget.Button BtnBatal;
    private widget.Button BtnCariTTD;
    private widget.Button BtnDokter;
    private widget.Button BtnEdit;
    private widget.Button BtnHapus;
    private widget.Button BtnKeluar;
    private widget.Button BtnSimpan;
    private widget.CekBox ChkInput;
    private widget.PanelBiasa FormInput;
    private widget.panelisi PanelInput;
    private java.awt.Canvas PhotoTTD;
    private widget.ScrollPane Scroll;
    private widget.TextBox TDokter;
    private widget.ComboBox UnitPJ;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel13;
    private widget.TextBox kddokter;
    private widget.Label label12;
    private widget.Label label37;
    private widget.panelisi panelGlass5;
    private widget.Table tbAdmin;
    // End of variables declaration//GEN-END:variables

    private void tampil() {
        Valid.tabelKosong(tabMode);
        try (ResultSet rs = koneksi.createStatement().executeQuery("select * from set_pjlab")) {
            if (rs.next()) {
                if (!(rs.getString(1) == null || rs.getString(1).isBlank() || rs.getString(1).equals("-"))) {
                    tabMode.addRow(new String[] {
                        rs.getString(1),
                        Sequel.cariIsiSmc("select dokter.nm_dokter from dokter where dokter.kd_dokter = ?", rs.getString(1)),
                        "Laboratorium PK",
                        Sequel.cariBooleanSmc("select * from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ? and dokter_ttdbasah.gambar_ttd is not null", rs.getString(1)) ? "Ada" : "Tidak ada"
                    });
                } else {
                    tabMode.addRow(new String[] {"-", "-", "Laboratorium PK", "Tidak ada"});
                }
                if (!(rs.getString(2) == null || rs.getString(2).isBlank() || rs.getString(2).equals("-"))) {
                    tabMode.addRow(new String[] {
                        rs.getString(2),
                        Sequel.cariIsiSmc("select dokter.nm_dokter from dokter where dokter.kd_dokter = ?", rs.getString(2)),
                        "Radiologi",
                        Sequel.cariBooleanSmc("select * from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ? and dokter_ttdbasah.gambar_ttd is not null", rs.getString(2)) ? "Ada" : "Tidak ada"
                    });
                } else {
                    tabMode.addRow(new String[] {"-", "-", "Laboratorium PK", "Tidak ada"});
                }
                if (!(rs.getString(3) == null || rs.getString(3).isBlank() || rs.getString(3).equals("-"))) {
                    tabMode.addRow(new String[] {
                        rs.getString(3),
                        Sequel.cariIsiSmc("select dokter.nm_dokter from dokter where dokter.kd_dokter = ?", rs.getString(3)),
                        "Hemodialisa",
                        Sequel.cariBooleanSmc("select * from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ? and dokter_ttdbasah.gambar_ttd is not null", rs.getString(3)) ? "Ada" : "Tidak ada"
                    });
                } else {
                    tabMode.addRow(new String[] {"-", "-", "Laboratorium PK", "Tidak ada"});
                }
                if (!(rs.getString(4) == null || rs.getString(4).isBlank() || rs.getString(4).equals("-"))) {
                    tabMode.addRow(new String[] {
                        rs.getString(4),
                        Sequel.cariIsiSmc("select dokter.nm_dokter from dokter where dokter.kd_dokter = ?", rs.getString(4)),
                        "Unit Transfusi Darah",
                        Sequel.cariBooleanSmc("select * from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ? and dokter_ttdbasah.gambar_ttd is not null", rs.getString(4)) ? "Ada" : "Tidak ada"
                    });
                } else {
                    tabMode.addRow(new String[] {"-", "-", "Laboratorium PK", "Tidak ada"});
                }
                if (!(rs.getString(5) == null || rs.getString(5).isBlank() || rs.getString(5).equals("-"))) {
                    tabMode.addRow(new String[] {
                        rs.getString(5),
                        Sequel.cariIsiSmc("select dokter.nm_dokter from dokter where dokter.kd_dokter = ?", rs.getString(5)),
                        "Laboratorium PA",
                        Sequel.cariBooleanSmc("select * from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ? and dokter_ttdbasah.gambar_ttd is not null", rs.getString(5)) ? "Ada" : "Tidak ada"
                    });
                } else {
                    tabMode.addRow(new String[] {"-", "-", "Laboratorium PK", "Tidak ada"});
                }
                if (!(rs.getString(6) == null || rs.getString(6).isBlank() || rs.getString(6).equals("-"))) {
                    tabMode.addRow(new String[] {
                        rs.getString(6),
                        Sequel.cariIsiSmc("select dokter.nm_dokter from dokter where dokter.kd_dokter = ?", rs.getString(6)),
                        "Laboratorium MB",
                        Sequel.cariBooleanSmc("select * from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ? and dokter_ttdbasah.gambar_ttd is not null", rs.getString(6)) ? "Ada" : "Tidak ada"
                    });
                } else {
                    tabMode.addRow(new String[] {"-", "-", "Laboratorium PK", "Tidak ada"});
                }
            }
        } catch (Exception e) {
            System.out.println("Notif : " + e);
        }
    }

    private void getData() {
        if (tbAdmin.getSelectedRow() != -1) {
            kddokter.setText(tbAdmin.getValueAt(tbAdmin.getSelectedRow(), 0).toString());
            TDokter.setText(tbAdmin.getValueAt(tbAdmin.getSelectedRow(), 1).toString());
            UnitPJ.setSelectedIndex(tbAdmin.getSelectedRow());
            if (tbAdmin.getValueAt(tbAdmin.getSelectedRow(), 3).toString().equals("Ada")) {
                ((Painter) PhotoTTD)
                    .setImage(Sequel.cariBlobSmc("select dokter_ttdbasah.gambar_ttd from dokter_ttdbasah where dokter_ttdbasah.kd_dokter = ?", tbAdmin.getValueAt(tbAdmin.getSelectedRow(), 0).toString()));
            } else {
                ((Painter) PhotoTTD).removeImage();
            }
        }
    }

    public void emptTeks() {
        kddokter.setText("");
        TDokter.setText("");
        UnitPJ.setSelectedIndex(0);
        kddokter.requestFocus();
        ((Painter) PhotoTTD).removeImage();
        tbAdmin.clearSelection();
    }

    public void isForm() {
        if (ChkInput.isSelected()) {
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH, 272));
            FormInput.setVisible(true);
            ChkInput.setVisible(true);
        } else {
            ChkInput.setVisible(false);
            PanelInput.setPreferredSize(new Dimension(WIDTH, 20));
            FormInput.setVisible(false);
            ChkInput.setVisible(true);
        }
    }
    
    private void simpanGambar() {
        if (pathGambar == null || pathGambar.isBlank() || kddokter.getText().equals("-")) return;
        
        if (Sequel.cariBooleanSmc("select * from dokter_ttdbasah where kd_dokter = ?", kddokter.getText())) {
            Sequel.menghapusSmc("dokter_ttdbasah", "kd_dokter = ?", kddokter.getText());
        }
        
        try (PreparedStatement ps = koneksi.prepareStatement("insert into dokter_ttdbasah values (?, ?)"); FileInputStream fs = new FileInputStream(pathGambar)) {
            ps.setString(1, kddokter.getText());
            ps.setBinaryStream(2, fs, new File(pathGambar).length());
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println("Notif : " + e);
        }
    }

    public class Painter extends Canvas {
        Image image;
        public void setImage(String file) {
            URL url = null;
            try {
                url = new File(file).toURI().toURL();
            } catch (MalformedURLException ex) {
                System.out.println("Notif : " + ex);
            }
            image = getToolkit().getImage(url);
            repaint();
        }
        
        public void setImage(Blob img) {
            try {
                image = getToolkit().createImage(img.getBytes(1, (int) img.length()));
            } catch (Exception e) {
                System.out.println("Notif : " + e);
            }
            repaint();
        }

        public void setImageIcon(ImageIcon file) {
            image = file.getImage();
            repaint();
        }
        
        public void removeImage() {
            if (image != null) {
                image = null;
            }
            repaint();
        }

        @Override
        public void paint(Graphics g) {
            try {
                double d = image.getHeight(this) / this.getHeight();
                double w = image.getWidth(this) / d;
                double x = this.getWidth() / 2 - w / 2;
                g.drawImage(image, (int) x, 0, (int) (w), this.getHeight(), this);
            } catch (Exception e) {
            }
        }
    }
}
