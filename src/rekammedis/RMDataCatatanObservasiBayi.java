/*
 * Source Generated by KhanzaHMS - Fork dari RSUD dr. Soetomo Surabaya
 * Coding by Doni Muhammad R â€Ž(kodingdonk@gmail.com)
 */

 package rekammedis; // Sesuaikan dengan package Anda

 import fungsi.WarnaTable;
 import fungsi.batasInput;
 import fungsi.koneksiDB;
 import fungsi.sekuel;
 import fungsi.validasi;
 import fungsi.akses;
 import java.awt.Cursor;
 import java.awt.Dimension;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
 import java.awt.event.WindowEvent;
 import java.awt.event.WindowListener;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException; // Import SQLException
 import java.sql.Types;      // Import Types untuk setNull
 import java.util.Calendar;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import javax.swing.JOptionPane;
 import javax.swing.JTable;
 import javax.swing.JTextField; // Import JTextField
 import javax.swing.Timer;
 import javax.swing.event.DocumentEvent;
 import javax.swing.table.DefaultTableModel;
 import javax.swing.table.TableColumn;
 import kepegawaian.DlgCariPetugas;
 
 
 /**
  *
  * @author perpustakaan // Nama author asli dipertahankan
  */
 public final class RMDataCatatanObservasiBayi extends javax.swing.JDialog { // Nama kelas sudah sesuai
     private final DefaultTableModel tabMode;
     private Connection koneksi=koneksiDB.condb();
     private sekuel Sequel=new sekuel();
     private validasi Valid=new validasi();
     private PreparedStatement ps;
     private ResultSet rs;
     private int i=0;
     private DlgCariPetugas petugas=new DlgCariPetugas(null,false);
     private String TANGGALMUNDUR="yes";
 
     // Deklarasi komponen GUI akan diinisialisasi oleh initComponents() dari file .form
 
     /** Creates new form DlgCatatanObservasiBayi
      * @param parent
      * @param modal */
     public RMDataCatatanObservasiBayi(java.awt.Frame parent, boolean modal) {
         super(parent, modal);
         initComponents(); // Memanggil komponen dari .form yang sudah dimodifikasi
         this.setLocation(8,1);
 
         // Definisikan model tabel dengan kolom baru
         tabMode=new DefaultTableModel(null,new Object[]{
             "No.Rawat","No.R.M.","Nama Pasien","Umur","JK","Tgl.Lahir", // 0-5
             "Tgl.Obser","Jam Obser", // 6-7
             "GCS","TD","HR","RR","Suhu","SpO2", // 8-13
             "Retraksi","OGT Residu","ASI","PASI","BAK","BAB","Ikterik","NCH", // 14-21 (Kolom Baru)
             "NIP","Nama Petugas" // 22-23
         }){
               @Override public boolean isCellEditable(int rowIndex, int colIndex){return false;}
         };
         tbObat.setModel(tabMode);
 
         tbObat.setPreferredScrollableViewportSize(new Dimension(500,500));
         tbObat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
 
         // Atur lebar kolom, total 24 kolom
         for (i = 0; i < 24; i++) {
             TableColumn column = tbObat.getColumnModel().getColumn(i);
              if(i==0){ column.setPreferredWidth(105); // No.Rawat
             }else if(i==1){ column.setPreferredWidth(65);  // No.R.M.
             }else if(i==2){ column.setPreferredWidth(160); // Nama Pasien
             }else if(i==3){ column.setPreferredWidth(50);  // Umur
             }else if(i==4){ column.setPreferredWidth(20);  // JK
             }else if(i==5){ column.setPreferredWidth(65);  // Tgl.Lahir
             }else if(i==6){ column.setPreferredWidth(65);  // Tgl.Obser
             }else if(i==7){ column.setPreferredWidth(60);  // Jam Obser
             }else if(i==8){ column.setPreferredWidth(45);  // GCS
             }else if(i==9){ column.setPreferredWidth(60);  // TD
             }else if(i==10){ column.setPreferredWidth(40); // HR
             }else if(i==11){ column.setPreferredWidth(40); // RR
             }else if(i==12){ column.setPreferredWidth(45); // Suhu
             }else if(i==13){ column.setPreferredWidth(40); // SpO2
             }else if(i==14){ column.setPreferredWidth(110);// Retraksi
             }else if(i==15){ column.setPreferredWidth(110);// OGT Residu
             }else if(i==16){ column.setPreferredWidth(110);// ASI
             }else if(i==17){ column.setPreferredWidth(110);// PASI
             }else if(i==18){ column.setPreferredWidth(80); // BAK
             }else if(i==19){ column.setPreferredWidth(80); // BAB
             }else if(i==20){ column.setPreferredWidth(100);// Ikterik
             }else if(i==21){ column.setPreferredWidth(120);// NCH
             }else if(i==22){ column.setPreferredWidth(90); // NIP
             }else if(i==23){ column.setPreferredWidth(160);// Nama Petugas
             }
         }
         tbObat.setDefaultRenderer(Object.class, new WarnaTable());
 
         // Batas Input Field Lama (GCS, TD tetap kata)
         TNoRw.setDocument(new batasInput((byte)17).getKata(TNoRw));
         NIP.setDocument(new batasInput((byte)20).getKata(NIP));
         GCS.setDocument(new batasInput((byte)10).getKata(GCS));
         TD.setDocument(new batasInput((byte)8).getKata(TD));
 
         // --- Batas Input untuk kolom numerik (HANYA ANGKA/DESIMAL) ---
         HR.setDocument(new batasInput((byte)3).getOnlyAngka(HR)); // Max 3 digit angka
         RR.setDocument(new batasInput((byte)3).getOnlyAngka(RR)); // Max 3 digit angka
         Suhu.setDocument(new batasInput((byte)5).getOnlyAngka(Suhu)); // Max 5 char untuk desimal (e.g., 36.5, 100.0)
         SPO.setDocument(new batasInput((byte)3).getOnlyAngka(SPO)); // Max 3 digit angka (0-100)
         // --- Akhir batas input numerik ---
 
         // Batas Input Field Baru (Teks)
         RetraksiDada.setDocument(new batasInput((byte)50).getKata(RetraksiDada));
         OgtResidu.setDocument(new batasInput((byte)50).getKata(OgtResidu));
         AsiJumlah.setDocument(new batasInput((byte)50).getKata(AsiJumlah));
         PasiJumlah.setDocument(new batasInput((byte)50).getKata(PasiJumlah));
         BakStatus.setDocument(new batasInput((byte)30).getKata(BakStatus));
         BabStatus.setDocument(new batasInput((byte)30).getKata(BabStatus));
         IkterikStatus.setDocument(new batasInput((byte)50).getKata(IkterikStatus));
         Nch.setDocument(new batasInput((byte)100).getKata(Nch));
 
         TCari.setDocument(new batasInput((int)100).getKata(TCari));
 
         if(koneksiDB.CARICEPAT().equals("aktif")){
             TCari.getDocument().addDocumentListener(new javax.swing.event.DocumentListener(){
                 @Override public void insertUpdate(DocumentEvent e) { if(TCari.getText().length()>2) { tampil(); } }
                 @Override public void removeUpdate(DocumentEvent e) { if(TCari.getText().length()>2) { tampil(); } }
                 @Override public void changedUpdate(DocumentEvent e) { if(TCari.getText().length()>2) { tampil(); } }
             });
         }
 
         petugas.addWindowListener(new WindowListener() {
             @Override public void windowOpened(WindowEvent e) {}
             @Override public void windowClosing(WindowEvent e) {}
             @Override public void windowClosed(WindowEvent e) {
                 if(petugas.getTable().getSelectedRow()!= -1){
                     NIP.setText(petugas.getTable().getValueAt(petugas.getTable().getSelectedRow(),0).toString());
                     NamaPetugas.setText(petugas.getTable().getValueAt(petugas.getTable().getSelectedRow(),1).toString());
                     NIP.requestFocus();
                 } else {
                     NIP.requestFocus();
                 }
             }
             @Override public void windowIconified(WindowEvent e) {}
             @Override public void windowDeiconified(WindowEvent e) {}
             @Override public void windowActivated(WindowEvent e) {}
             @Override public void windowDeactivated(WindowEvent e) {}
         });
 
         ChkInput.setSelected(false);
         isForm();
         jam();
 
         try {
             TANGGALMUNDUR=koneksiDB.TANGGALMUNDUR();
         } catch (Exception e) {
             TANGGALMUNDUR="yes";
         }
     }
 
 
     /** This method is called from within the constructor to
      * initialize the form.
      * WARNING: Do NOT modify this code. The content of this method is
      * always regenerated by the Form Editor.
      */
     @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        MnCatatanObservasiBayi = new javax.swing.JMenuItem();
        JK = new widget.TextBox();
        Umur = new widget.TextBox();
        TanggalRegistrasi = new widget.TextBox();
        internalFrame1 = new widget.InternalFrame();
        Scroll = new widget.ScrollPane();
        tbObat = new widget.Table();
        jPanel3 = new javax.swing.JPanel();
        panelGlass8 = new widget.panelisi();
        BtnSimpan = new widget.Button();
        BtnBatal = new widget.Button();
        BtnHapus = new widget.Button();
        BtnEdit = new widget.Button();
        BtnPrint = new widget.Button();
        jLabel7 = new widget.Label();
        LCount = new widget.Label();
        BtnKeluar = new widget.Button();
        panelGlass9 = new widget.panelisi();
        jLabel19 = new widget.Label();
        DTPCari1 = new widget.Tanggal();
        jLabel21 = new widget.Label();
        DTPCari2 = new widget.Tanggal();
        jLabel6 = new widget.Label();
        TCari = new widget.TextBox();
        BtnCari = new widget.Button();
        BtnAll = new widget.Button();
        PanelInput = new javax.swing.JPanel();
        FormInput = new widget.PanelBiasa();
        jLabel4 = new widget.Label();
        TNoRw = new widget.TextBox();
        TNoRM = new widget.TextBox();
        TPasien = new widget.TextBox();
        jLabel8 = new widget.Label();
        TglLahir = new widget.TextBox();
        jLabel16 = new widget.Label();
        Tanggal = new widget.Tanggal();
        Jam = new widget.ComboBox();
        Menit = new widget.ComboBox();
        Detik = new widget.ComboBox();
        ChkKejadian = new widget.CekBox();
        jLabel18 = new widget.Label();
        NIP = new widget.TextBox();
        NamaPetugas = new widget.TextBox();
        btnPetugas = new widget.Button();
        jLabel12 = new widget.Label();
        GCS = new widget.TextBox();
        jLabel23 = new widget.Label();
        TD = new widget.TextBox();
        jLabel27 = new widget.Label();
        jLabel20 = new widget.Label();
        HR = new widget.TextBox();
        jLabel17 = new widget.Label();
        jLabel28 = new widget.Label();
        RR = new widget.TextBox();
        jLabel25 = new widget.Label();
        jLabel22 = new widget.Label();
        Suhu = new widget.TextBox();
        jLabel26 = new widget.Label();
        jLabel29 = new widget.Label();
        SPO = new widget.TextBox();
        jLabel35 = new widget.Label();
        jLabelRetraksi = new widget.Label();
        RetraksiDada = new widget.TextBox();
        jLabelOgt = new widget.Label();
        OgtResidu = new widget.TextBox();
        jLabelNch = new widget.Label();
        Nch = new widget.TextBox();
        jLabelAsi = new widget.Label();
        AsiJumlah = new widget.TextBox();
        jLabelPasi = new widget.Label();
        PasiJumlah = new widget.TextBox();
        jLabelBak = new widget.Label();
        BakStatus = new widget.TextBox();
        jLabelBab = new widget.Label();
        BabStatus = new widget.TextBox();
        jLabelIkterik = new widget.Label();
        IkterikStatus = new widget.TextBox();
        ChkInput = new widget.CekBox();

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        MnCatatanObservasiBayi.setBackground(new java.awt.Color(255, 255, 254));
        MnCatatanObservasiBayi.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        MnCatatanObservasiBayi.setForeground(new java.awt.Color(50, 50, 50));
        MnCatatanObservasiBayi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/category.png"))); // NOI18N
        MnCatatanObservasiBayi.setText("Formulir Catatan Observasi Bayi");
        MnCatatanObservasiBayi.setName("MnCatatanObservasiBayi"); // NOI18N
        MnCatatanObservasiBayi.setPreferredSize(new java.awt.Dimension(230, 26));
        MnCatatanObservasiBayi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnCatatanObservasiBayiActionPerformed(evt);
            }
        });
        jPopupMenu1.add(MnCatatanObservasiBayi);

        JK.setEditable(false);
        JK.setHighlighter(null);
        JK.setName("JK"); // NOI18N

        Umur.setEditable(false);
        Umur.setHighlighter(null);
        Umur.setName("Umur"); // NOI18N

        TanggalRegistrasi.setEditable(false);
        TanggalRegistrasi.setHighlighter(null);
        TanggalRegistrasi.setName("TanggalRegistrasi"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        internalFrame1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 245, 235)), "::[ Catatan Observasi Bayi ]::", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(50, 50, 50))); // NOI18N
        internalFrame1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        internalFrame1.setName("internalFrame1"); // NOI18N
        internalFrame1.setLayout(new java.awt.BorderLayout(1, 1));

        Scroll.setName("Scroll"); // NOI18N
        Scroll.setOpaque(true);
        Scroll.setPreferredSize(new java.awt.Dimension(452, 200));

        tbObat.setToolTipText("Silahkan klik untuk memilih data yang mau diedit ataupun dihapus");
        tbObat.setComponentPopupMenu(jPopupMenu1);
        tbObat.setName("tbObat"); // NOI18N
        tbObat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbObatMouseClicked(evt);
            }
        });
        tbObat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbObatKeyPressed(evt);
            }
        });
        Scroll.setViewportView(tbObat);

        internalFrame1.add(Scroll, java.awt.BorderLayout.CENTER);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setOpaque(false);
        jPanel3.setPreferredSize(new java.awt.Dimension(44, 100));
        jPanel3.setLayout(new java.awt.BorderLayout(1, 1));

        panelGlass8.setName("panelGlass8"); // NOI18N
        panelGlass8.setPreferredSize(new java.awt.Dimension(44, 44));
        panelGlass8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        BtnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/save-16x16.png"))); // NOI18N
        BtnSimpan.setMnemonic('S');
        BtnSimpan.setText("Simpan");
        BtnSimpan.setToolTipText("Alt+S");
        BtnSimpan.setName("BtnSimpan"); // NOI18N
        BtnSimpan.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSimpanActionPerformed(evt);
            }
        });
        BtnSimpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnSimpanKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnSimpan);

        BtnBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Cancel-2-16x16.png"))); // NOI18N
        BtnBatal.setMnemonic('B');
        BtnBatal.setText("Baru");
        BtnBatal.setToolTipText("Alt+B");
        BtnBatal.setName("BtnBatal"); // NOI18N
        BtnBatal.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBatalActionPerformed(evt);
            }
        });
        BtnBatal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnBatalKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnBatal);

        BtnHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/stop_f2.png"))); // NOI18N
        BtnHapus.setMnemonic('H');
        BtnHapus.setText("Hapus");
        BtnHapus.setToolTipText("Alt+H");
        BtnHapus.setName("BtnHapus"); // NOI18N
        BtnHapus.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHapusActionPerformed(evt);
            }
        });
        BtnHapus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnHapusKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnHapus);

        BtnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/inventaris.png"))); // NOI18N
        BtnEdit.setMnemonic('G');
        BtnEdit.setText("Ganti");
        BtnEdit.setToolTipText("Alt+G");
        BtnEdit.setName("BtnEdit"); // NOI18N
        BtnEdit.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEditActionPerformed(evt);
            }
        });
        BtnEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnEditKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnEdit);

        BtnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/b_print.png"))); // NOI18N
        BtnPrint.setMnemonic('T');
        BtnPrint.setText("Cetak");
        BtnPrint.setToolTipText("Alt+T");
        BtnPrint.setName("BtnPrint"); // NOI18N
        BtnPrint.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrintActionPerformed(evt);
            }
        });
        BtnPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnPrintKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnPrint);

        jLabel7.setText("Record :");
        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(80, 23));
        panelGlass8.add(jLabel7);

        LCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LCount.setText("0");
        LCount.setName("LCount"); // NOI18N
        LCount.setPreferredSize(new java.awt.Dimension(70, 23));
        panelGlass8.add(LCount);

        BtnKeluar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/exit.png"))); // NOI18N
        BtnKeluar.setMnemonic('K');
        BtnKeluar.setText("Keluar");
        BtnKeluar.setToolTipText("Alt+K");
        BtnKeluar.setName("BtnKeluar"); // NOI18N
        BtnKeluar.setPreferredSize(new java.awt.Dimension(100, 30));
        BtnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnKeluarActionPerformed(evt);
            }
        });
        BtnKeluar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnKeluarKeyPressed(evt);
            }
        });
        panelGlass8.add(BtnKeluar);

        jPanel3.add(panelGlass8, java.awt.BorderLayout.CENTER);

        panelGlass9.setName("panelGlass9"); // NOI18N
        panelGlass9.setPreferredSize(new java.awt.Dimension(44, 44));
        panelGlass9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 9));

        jLabel19.setText("Tanggal :");
        jLabel19.setName("jLabel19"); // NOI18N
        jLabel19.setPreferredSize(new java.awt.Dimension(60, 23));
        panelGlass9.add(jLabel19);

        DTPCari1.setForeground(new java.awt.Color(50, 70, 50));
        DTPCari1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30-04-2025" }));
        DTPCari1.setDisplayFormat("dd-MM-yyyy");
        DTPCari1.setName("DTPCari1"); // NOI18N
        DTPCari1.setOpaque(false);
        DTPCari1.setPreferredSize(new java.awt.Dimension(95, 23));
        panelGlass9.add(DTPCari1);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("s.d.");
        jLabel21.setName("jLabel21"); // NOI18N
        jLabel21.setPreferredSize(new java.awt.Dimension(23, 23));
        panelGlass9.add(jLabel21);

        DTPCari2.setForeground(new java.awt.Color(50, 70, 50));
        DTPCari2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30-04-2025" }));
        DTPCari2.setDisplayFormat("dd-MM-yyyy");
        DTPCari2.setName("DTPCari2"); // NOI18N
        DTPCari2.setOpaque(false);
        DTPCari2.setPreferredSize(new java.awt.Dimension(95, 23));
        panelGlass9.add(DTPCari2);

        jLabel6.setText("Key Word :");
        jLabel6.setName("jLabel6"); // NOI18N
        jLabel6.setPreferredSize(new java.awt.Dimension(70, 23));
        panelGlass9.add(jLabel6);

        TCari.setName("TCari"); // NOI18N
        TCari.setPreferredSize(new java.awt.Dimension(250, 23));
        TCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TCariKeyPressed(evt);
            }
        });
        panelGlass9.add(TCari);

        BtnCari.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/accept.png"))); // NOI18N
        BtnCari.setMnemonic('3');
        BtnCari.setToolTipText("Alt+3");
        BtnCari.setName("BtnCari"); // NOI18N
        BtnCari.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCariActionPerformed(evt);
            }
        });
        BtnCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnCariKeyPressed(evt);
            }
        });
        panelGlass9.add(BtnCari);

        BtnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Search-16x16.png"))); // NOI18N
        BtnAll.setMnemonic('M');
        BtnAll.setToolTipText("Alt+M");
        BtnAll.setName("BtnAll"); // NOI18N
        BtnAll.setPreferredSize(new java.awt.Dimension(28, 23));
        BtnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAllActionPerformed(evt);
            }
        });
        BtnAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BtnAllKeyPressed(evt);
            }
        });
        panelGlass9.add(BtnAll);

        jPanel3.add(panelGlass9, java.awt.BorderLayout.PAGE_START);

        internalFrame1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        PanelInput.setName("PanelInput"); // NOI18N
        PanelInput.setOpaque(false);
        PanelInput.setPreferredSize(new java.awt.Dimension(192, 214));
        PanelInput.setLayout(new java.awt.BorderLayout(1, 1));

        FormInput.setBackground(new java.awt.Color(250, 255, 245));
        FormInput.setName("FormInput"); // NOI18N
        FormInput.setPreferredSize(new java.awt.Dimension(100, 194));
        FormInput.setLayout(null);

        jLabel4.setText("No.Rawat :");
        jLabel4.setName("jLabel4"); // NOI18N
        FormInput.add(jLabel4);
        jLabel4.setBounds(0, 10, 80, 23);

        TNoRw.setHighlighter(null);
        TNoRw.setName("TNoRw"); // NOI18N
        TNoRw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TNoRwKeyPressed(evt);
            }
        });
        FormInput.add(TNoRw);
        TNoRw.setBounds(84, 10, 136, 23);

        TNoRM.setEditable(false);
        TNoRM.setHighlighter(null);
        TNoRM.setName("TNoRM"); // NOI18N
        FormInput.add(TNoRM);
        TNoRM.setBounds(222, 10, 112, 23);

        TPasien.setEditable(false);
        TPasien.setHighlighter(null);
        TPasien.setName("TPasien"); // NOI18N
        FormInput.add(TPasien);
        TPasien.setBounds(336, 10, 285, 23);

        jLabel8.setText("Tgl.Lahir :");
        jLabel8.setName("jLabel8"); // NOI18N
        FormInput.add(jLabel8);
        jLabel8.setBounds(625, 10, 60, 23);

        TglLahir.setEditable(false);
        TglLahir.setHighlighter(null);
        TglLahir.setName("TglLahir"); // NOI18N
        FormInput.add(TglLahir);
        TglLahir.setBounds(689, 10, 100, 23);

        jLabel16.setText("Tanggal :");
        jLabel16.setName("jLabel16"); // NOI18N
        jLabel16.setVerifyInputWhenFocusTarget(false);
        FormInput.add(jLabel16);
        jLabel16.setBounds(0, 40, 80, 23);

        Tanggal.setForeground(new java.awt.Color(50, 70, 50));
        Tanggal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30-04-2025" }));
        Tanggal.setDisplayFormat("dd-MM-yyyy");
        Tanggal.setName("Tanggal"); // NOI18N
        Tanggal.setOpaque(false);
        Tanggal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TanggalKeyPressed(evt);
            }
        });
        FormInput.add(Tanggal);
        Tanggal.setBounds(84, 40, 90, 23);

        Jam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        Jam.setName("Jam"); // NOI18N
        Jam.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JamKeyPressed(evt);
            }
        });
        FormInput.add(Jam);
        Jam.setBounds(178, 40, 62, 23);

        Menit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        Menit.setName("Menit"); // NOI18N
        Menit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MenitKeyPressed(evt);
            }
        });
        FormInput.add(Menit);
        Menit.setBounds(243, 40, 62, 23);

        Detik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        Detik.setName("Detik"); // NOI18N
        Detik.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DetikKeyPressed(evt);
            }
        });
        FormInput.add(Detik);
        Detik.setBounds(308, 40, 62, 23);

        ChkKejadian.setBorder(null);
        ChkKejadian.setSelected(true);
        ChkKejadian.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ChkKejadian.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChkKejadian.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ChkKejadian.setName("ChkKejadian"); // NOI18N
        FormInput.add(ChkKejadian);
        ChkKejadian.setBounds(373, 40, 23, 23);

        jLabel18.setText("Petugas :");
        jLabel18.setName("jLabel18"); // NOI18N
        FormInput.add(jLabel18);
        jLabel18.setBounds(400, 40, 70, 23);

        NIP.setEditable(false);
        NIP.setHighlighter(null);
        NIP.setName("NIP"); // NOI18N
        NIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NIPKeyPressed(evt);
            }
        });
        FormInput.add(NIP);
        NIP.setBounds(474, 40, 94, 23);

        NamaPetugas.setEditable(false);
        NamaPetugas.setName("NamaPetugas"); // NOI18N
        FormInput.add(NamaPetugas);
        NamaPetugas.setBounds(570, 40, 187, 23);

        btnPetugas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/190.png"))); // NOI18N
        btnPetugas.setMnemonic('2');
        btnPetugas.setToolTipText("ALt+2");
        btnPetugas.setName("btnPetugas"); // NOI18N
        btnPetugas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPetugasActionPerformed(evt);
            }
        });
        btnPetugas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnPetugasKeyPressed(evt);
            }
        });
        FormInput.add(btnPetugas);
        btnPetugas.setBounds(761, 40, 28, 23);

        jLabel12.setText("GCS (E,V,M) :");
        jLabel12.setName("jLabel12"); // NOI18N
        FormInput.add(jLabel12);
        jLabel12.setBounds(0, 70, 80, 23);

        GCS.setFocusTraversalPolicyProvider(true);
        GCS.setName("GCS"); // NOI18N
        GCS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GCSKeyPressed(evt);
            }
        });
        FormInput.add(GCS);
        GCS.setBounds(84, 70, 50, 23);

        jLabel23.setText("TD :");
        jLabel23.setName("jLabel23"); // NOI18N
        FormInput.add(jLabel23);
        jLabel23.setBounds(138, 70, 40, 23);

        TD.setFocusTraversalPolicyProvider(true);
        TD.setName("TD"); // NOI18N
        TD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TDKeyPressed(evt);
            }
        });
        FormInput.add(TD);
        TD.setBounds(182, 70, 70, 23);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel27.setText("mmHg");
        jLabel27.setName("jLabel27"); // NOI18N
        FormInput.add(jLabel27);
        jLabel27.setBounds(255, 70, 40, 23);

        jLabel20.setText("HR :");
        jLabel20.setName("jLabel20"); // NOI18N
        FormInput.add(jLabel20);
        jLabel20.setBounds(295, 70, 40, 23);

        HR.setFocusTraversalPolicyProvider(true);
        HR.setName("HR"); // NOI18N
        HR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HRKeyPressed(evt);
            }
        });
        FormInput.add(HR);
        HR.setBounds(339, 70, 40, 23);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("x/menit");
        jLabel17.setName("jLabel17"); // NOI18N
        FormInput.add(jLabel17);
        jLabel17.setBounds(382, 70, 50, 23);

        jLabel28.setText("RR :");
        jLabel28.setName("jLabel28"); // NOI18N
        FormInput.add(jLabel28);
        jLabel28.setBounds(430, 70, 40, 23);

        RR.setFocusTraversalPolicyProvider(true);
        RR.setName("RR"); // NOI18N
        RR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RRKeyPressed(evt);
            }
        });
        FormInput.add(RR);
        RR.setBounds(474, 70, 40, 23);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setText("x/menit");
        jLabel25.setName("jLabel25"); // NOI18N
        FormInput.add(jLabel25);
        jLabel25.setBounds(517, 70, 50, 23);

        jLabel22.setText("Suhu :");
        jLabel22.setName("jLabel22"); // NOI18N
        FormInput.add(jLabel22);
        jLabel22.setBounds(570, 70, 40, 23);

        Suhu.setFocusTraversalPolicyProvider(true);
        Suhu.setName("Suhu"); // NOI18N
        Suhu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SuhuKeyPressed(evt);
            }
        });
        FormInput.add(Suhu);
        Suhu.setBounds(614, 70, 40, 23);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel26.setText("Â°C");
        jLabel26.setName("jLabel26"); // NOI18N
        FormInput.add(jLabel26);
        jLabel26.setBounds(657, 70, 30, 23);

        jLabel29.setText("SpO2 :");
        jLabel29.setName("jLabel29"); // NOI18N
        FormInput.add(jLabel29);
        jLabel29.setBounds(686, 70, 40, 23);

        SPO.setFocusTraversalPolicyProvider(true);
        SPO.setName("SPO"); // NOI18N
        SPO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SPOKeyPressed(evt);
            }
        });
        FormInput.add(SPO);
        SPO.setBounds(730, 70, 40, 23);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel35.setText("%");
        jLabel35.setName("jLabel35"); // NOI18N
        FormInput.add(jLabel35);
        jLabel35.setBounds(773, 70, 30, 23);

        jLabelRetraksi.setText("Retraksi Dada :");
        jLabelRetraksi.setName("jLabelRetraksi"); // NOI18N
        FormInput.add(jLabelRetraksi);
        jLabelRetraksi.setBounds(0, 100, 80, 23);

        RetraksiDada.setName("RetraksiDada"); // NOI18N
        RetraksiDada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RetraksiDadaKeyPressed(evt);
            }
        });
        FormInput.add(RetraksiDada);
        RetraksiDada.setBounds(84, 100, 50, 23);

        jLabelOgt.setText("OGT Residu :");
        jLabelOgt.setName("jLabelOgt"); // NOI18N
        FormInput.add(jLabelOgt);
        jLabelOgt.setBounds(140, 100, 70, 23);

        OgtResidu.setName("OgtResidu"); // NOI18N
        OgtResidu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                OgtResiduKeyPressed(evt);
            }
        });
        FormInput.add(OgtResidu);
        OgtResidu.setBounds(210, 100, 60, 23);

        jLabelNch.setText("NCH :");
        jLabelNch.setName("jLabelNch"); // NOI18N
        FormInput.add(jLabelNch);
        jLabelNch.setBounds(270, 100, 40, 23);

        Nch.setName("Nch"); // NOI18N
        Nch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NchKeyPressed(evt);
            }
        });
        FormInput.add(Nch);
        Nch.setBounds(320, 100, 70, 23);

        jLabelAsi.setText("ASI :");
        jLabelAsi.setName("jLabelAsi"); // NOI18N
        FormInput.add(jLabelAsi);
        jLabelAsi.setBounds(390, 100, 40, 23);

        AsiJumlah.setName("AsiJumlah"); // NOI18N
        AsiJumlah.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AsiJumlahKeyPressed(evt);
            }
        });
        FormInput.add(AsiJumlah);
        AsiJumlah.setBounds(440, 100, 70, 23);

        jLabelPasi.setText("PASI :");
        jLabelPasi.setName("jLabelPasi"); // NOI18N
        FormInput.add(jLabelPasi);
        jLabelPasi.setBounds(510, 100, 40, 23);

        PasiJumlah.setName("PasiJumlah"); // NOI18N
        PasiJumlah.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PasiJumlahKeyPressed(evt);
            }
        });
        FormInput.add(PasiJumlah);
        PasiJumlah.setBounds(560, 100, 80, 23);

        jLabelBak.setText("BAK :");
        jLabelBak.setName("jLabelBak"); // NOI18N
        FormInput.add(jLabelBak);
        jLabelBak.setBounds(10, 130, 40, 23);

        BakStatus.setName("BakStatus"); // NOI18N
        BakStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BakStatusKeyPressed(evt);
            }
        });
        FormInput.add(BakStatus);
        BakStatus.setBounds(60, 130, 60, 23);

        jLabelBab.setText("BAB :");
        jLabelBab.setName("jLabelBab"); // NOI18N
        FormInput.add(jLabelBab);
        jLabelBab.setBounds(120, 130, 40, 23);

        BabStatus.setName("BabStatus"); // NOI18N
        BabStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BabStatusKeyPressed(evt);
            }
        });
        FormInput.add(BabStatus);
        BabStatus.setBounds(170, 130, 60, 23);

        jLabelIkterik.setText("Ikterik :");
        jLabelIkterik.setName("jLabelIkterik"); // NOI18N
        FormInput.add(jLabelIkterik);
        jLabelIkterik.setBounds(240, 130, 75, 23);

        IkterikStatus.setName("IkterikStatus"); // NOI18N
        IkterikStatus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IkterikStatusKeyPressed(evt);
            }
        });
        FormInput.add(IkterikStatus);
        IkterikStatus.setBounds(320, 130, 140, 23);

        PanelInput.add(FormInput, java.awt.BorderLayout.CENTER);

        ChkInput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setMnemonic('I');
        ChkInput.setText(".: Input Data");
        ChkInput.setToolTipText("Alt+I");
        ChkInput.setBorderPainted(true);
        ChkInput.setBorderPaintedFlat(true);
        ChkInput.setFocusable(false);
        ChkInput.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ChkInput.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ChkInput.setName("ChkInput"); // NOI18N
        ChkInput.setPreferredSize(new java.awt.Dimension(192, 20));
        ChkInput.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/143.png"))); // NOI18N
        ChkInput.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/145.png"))); // NOI18N
        ChkInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChkInputActionPerformed(evt);
            }
        });
        PanelInput.add(ChkInput, java.awt.BorderLayout.PAGE_END);

        internalFrame1.add(PanelInput, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(internalFrame1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
     private void TNoRwKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TNoRwKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_PAGE_DOWN){
             isRawat();
             TCari.setText(TNoRw.getText()); // Otomatis isi TCari
         }else{
             Valid.pindah(evt,TCari,Tanggal);
         }
     }//GEN-LAST:event_TNoRwKeyPressed
 
     private void BtnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSimpanActionPerformed
         if(TNoRw.getText().trim().isEmpty()||TPasien.getText().trim().isEmpty()){
             Valid.textKosong(TNoRw,"pasien");
         }else if(NIP.getText().trim().isEmpty()||NamaPetugas.getText().trim().isEmpty()){
             Valid.textKosong(NIP,"Petugas");
         }else{
             if(akses.getkode().equals("Admin Utama")){
                 simpan();
             }else{
                 if(TanggalRegistrasi.getText().isEmpty()){ // Cek jika tanggal registrasi kosong
                      TanggalRegistrasi.setText(Sequel.cariIsi("select concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg) from reg_periksa where reg_periksa.no_rawat=?",TNoRw.getText()));
                      if(TanggalRegistrasi.getText().isEmpty()){ // Jika masih kosong setelah query (No Rawat salah?)
                          JOptionPane.showMessageDialog(null, "Gagal mengambil tanggal registrasi pasien. Pastikan No. Rawat benar.");
                          TNoRw.requestFocus();
                          return;
                      }
                 }
                 if(Sequel.cekTanggalRegistrasi(TanggalRegistrasi.getText(),Valid.SetTgl(Tanggal.getSelectedItem()+"")+" "+Jam.getSelectedItem()+":"+Menit.getSelectedItem()+":"+Detik.getSelectedItem())==true){
                     simpan();
                 }
             }
         }
     }//GEN-LAST:event_BtnSimpanActionPerformed
 
     private void BtnSimpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnSimpanKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             BtnSimpanActionPerformed(null);
         }else{
             // Pindah dari field terakhir (Ikterik) ke Batal
             Valid.pindah(evt,IkterikStatus,BtnBatal);
         }
     }//GEN-LAST:event_BtnSimpanKeyPressed
 
     private void BtnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBatalActionPerformed
         emptTeks();
         ChkInput.setSelected(true);
         isForm();
     }//GEN-LAST:event_BtnBatalActionPerformed
 
     private void BtnBatalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnBatalKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             emptTeks();
         }else{Valid.pindah(evt, BtnSimpan, BtnHapus);}
     }//GEN-LAST:event_BtnBatalKeyPressed
 
     private void BtnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHapusActionPerformed
         if(tbObat.getSelectedRow()>-1){
             if(akses.getkode().equals("Admin Utama")){
                 hapus();
             }else{
                 // Pengecekan NIP (index 22) dan 48 jam
                 if(NIP.getText().equals(tbObat.getValueAt(tbObat.getSelectedRow(),22).toString())){
                     if(Sequel.cekTanggal48jam(tbObat.getValueAt(tbObat.getSelectedRow(),6).toString()+" "+tbObat.getValueAt(tbObat.getSelectedRow(),7).toString(),Sequel.ambiltanggalsekarang())==true){
                         hapus();
                     } else {
                          JOptionPane.showMessageDialog(null,"Data sudah melewati 48 jam, tidak bisa dihapus.");
                     }
                 }else{
                     JOptionPane.showMessageDialog(null,"Hanya bisa dihapus oleh petugas yang bersangkutan.");
                 }
             }
         }else{
             JOptionPane.showMessageDialog(rootPane,"Silahkan pilih data terlebih dahulu.");
         }
     }//GEN-LAST:event_BtnHapusActionPerformed
 
     private void BtnHapusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnHapusKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             BtnHapusActionPerformed(null);
         }else{
             Valid.pindah(evt, BtnBatal, BtnEdit);
         }
     }//GEN-LAST:event_BtnHapusKeyPressed
 
     private void BtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEditActionPerformed
          if(TNoRw.getText().trim().isEmpty()||TPasien.getText().trim().isEmpty()){
             Valid.textKosong(TNoRw,"pasien");
         }else if(NIP.getText().trim().isEmpty()||NamaPetugas.getText().trim().isEmpty()){
             Valid.textKosong(NIP,"Petugas");
         }else{
             if(tbObat.getSelectedRow()>-1){
                 if(akses.getkode().equals("Admin Utama")){
                     ganti();
                 }else{
                      // Pengecekan NIP (index 22) dan 48 jam
                     if(NIP.getText().equals(tbObat.getValueAt(tbObat.getSelectedRow(),22).toString())){
                         if(Sequel.cekTanggal48jam(tbObat.getValueAt(tbObat.getSelectedRow(),6).toString()+" "+tbObat.getValueAt(tbObat.getSelectedRow(),7).toString(),Sequel.ambiltanggalsekarang())==true){
                             if(TanggalRegistrasi.getText().isEmpty()){ // Cek lagi tgl registrasi
                                 TanggalRegistrasi.setText(Sequel.cariIsi("select concat(reg_periksa.tgl_registrasi,' ',reg_periksa.jam_reg) from reg_periksa where reg_periksa.no_rawat=?",TNoRw.getText()));
                                 if(TanggalRegistrasi.getText().isEmpty()){
                                      JOptionPane.showMessageDialog(null, "Gagal mengambil tanggal registrasi pasien. Pastikan No. Rawat benar.");
                                      TNoRw.requestFocus();
                                      return;
                                  }
                             }
                             // Pengecekan tanggal mundur
                             if(Sequel.cekTanggalRegistrasi(TanggalRegistrasi.getText(),Valid.SetTgl(Tanggal.getSelectedItem()+"")+" "+Jam.getSelectedItem()+":"+Menit.getSelectedItem()+":"+Detik.getSelectedItem())==true){
                                 ganti();
                             }
                         } else {
                              JOptionPane.showMessageDialog(null,"Data sudah melewati 48 jam, tidak bisa diganti.");
                         }
                     }else{
                         JOptionPane.showMessageDialog(null,"Hanya bisa diganti oleh petugas yang bersangkutan.");
                     }
                 }
             }else{
                 JOptionPane.showMessageDialog(rootPane,"Silahkan pilih data terlebih dahulu.");
             }
         }
     }//GEN-LAST:event_BtnEditActionPerformed
 
     private void BtnEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnEditKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             BtnEditActionPerformed(null);
         }else{
             Valid.pindah(evt, BtnHapus, BtnPrint);
         }
     }//GEN-LAST:event_BtnEditKeyPressed
 
     private void BtnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnKeluarActionPerformed
         petugas.dispose();
         dispose();
     }//GEN-LAST:event_BtnKeluarActionPerformed
 
     private void BtnKeluarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnKeluarKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             BtnKeluarActionPerformed(null);
         }else{Valid.pindah(evt,BtnPrint,TCari);}
     }//GEN-LAST:event_BtnKeluarKeyPressed
 
     private void BtnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrintActionPerformed
         this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
         if(tabMode.getRowCount()==0){
             JOptionPane.showMessageDialog(null,"Maaf, data sudah habis. Tidak ada data yang bisa anda print.");
             BtnBatal.requestFocus();
         }else if(tabMode.getRowCount()!=0){
             Map<String, Object> param = new HashMap<>();
             param.put("namars",akses.getnamars());
             param.put("alamatrs",akses.getalamatrs());
             param.put("kotars",akses.getkabupatenrs());
             param.put("propinsirs",akses.getpropinsirs());
             param.put("kontakrs",akses.getkontakrs());
             param.put("emailrs",akses.getemailrs());
             param.put("logo",Sequel.cariGambar("select setting.logo from setting"));
 
             // Query untuk Print List Data Bayi
             String sqlSelect = "select reg_periksa.no_rawat,pasien.no_rkm_medis,pasien.nm_pasien,reg_periksa.umurdaftar,reg_periksa.sttsumur,"+
                        "pasien.jk,pasien.tgl_lahir,catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat,catatan_observasi_bayi.gcs,"+
                        "catatan_observasi_bayi.td,catatan_observasi_bayi.hr,catatan_observasi_bayi.rr,catatan_observasi_bayi.suhu,catatan_observasi_bayi.spo2,"+
                        "catatan_observasi_bayi.retraksi_dada, catatan_observasi_bayi.ogt_residu, catatan_observasi_bayi.asi_jumlah, catatan_observasi_bayi.pasi_jumlah, " +
                        "catatan_observasi_bayi.bak_status, catatan_observasi_bayi.bab_status, catatan_observasi_bayi.ikterik_status, catatan_observasi_bayi.nch, " +
                        "catatan_observasi_bayi.nip,petugas.nama " +
                        "from catatan_observasi_bayi inner join reg_periksa on catatan_observasi_bayi.no_rawat=reg_periksa.no_rawat "+
                        "inner join pasien on reg_periksa.no_rkm_medis=pasien.no_rkm_medis "+
                        "inner join petugas on catatan_observasi_bayi.nip=petugas.nip ";
 
             String sqlWhere = "where catatan_observasi_bayi.tgl_perawatan between '"+Valid.SetTgl(DTPCari1.getSelectedItem()+"")+"' and '"+Valid.SetTgl(DTPCari2.getSelectedItem()+"")+"'";
             String sqlOrder = " order by catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat";
 
             if(!TCari.getText().trim().isEmpty()){
                  sqlWhere += " and (reg_periksa.no_rawat like '%"+TCari.getText().trim()+"%' or pasien.no_rkm_medis like '%"+TCari.getText().trim()+"%' or "+
                              "pasien.nm_pasien like '%"+TCari.getText().trim()+"%' or catatan_observasi_bayi.nip like '%"+TCari.getText().trim()+"%' or petugas.nama like '%"+TCari.getText().trim()+"%')";
             }
             // Ganti nama jasper dan judul report
             Valid.MyReportqry("rptDataCatatanObservasiBayi.jasper","report","::[ Data Catatan Observasi Bayi ]::", sqlSelect + sqlWhere + sqlOrder, param);
         }
         this.setCursor(Cursor.getDefaultCursor());
     }//GEN-LAST:event_BtnPrintActionPerformed
 
     private void BtnPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnPrintKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             BtnPrintActionPerformed(null);
         }else{
             Valid.pindah(evt, BtnEdit, BtnKeluar);
         }
     }//GEN-LAST:event_BtnPrintKeyPressed
 
     private void TCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TCariKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER){
             BtnCariActionPerformed(null);
         }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_DOWN){
             BtnCari.requestFocus();
         }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_UP){
             BtnKeluar.requestFocus();
         }
     }//GEN-LAST:event_TCariKeyPressed
 
     private void BtnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCariActionPerformed
         tampil();
     }//GEN-LAST:event_BtnCariActionPerformed
 
     private void BtnCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnCariKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
             BtnCariActionPerformed(null);
         }else{
             Valid.pindah(evt, TCari, BtnAll);
         }
     }//GEN-LAST:event_BtnCariKeyPressed
 
     private void BtnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAllActionPerformed
         TCari.setText("");
         TNoRw.setText(""); // Kosongkan juga No Rawat
         TNoRM.setText("");
         TPasien.setText("");
         emptTeks(); // Kosongkan field input
         tampil();
     }//GEN-LAST:event_BtnAllActionPerformed
 
     private void BtnAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnAllKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_SPACE){
            BtnAllActionPerformed(null);
         }else{
             Valid.pindah(evt, BtnCari, TNoRw); // Pindah ke No Rawat setelah All
         }
     }//GEN-LAST:event_BtnAllKeyPressed
 
     private void TanggalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TanggalKeyPressed
         Valid.pindah(evt,TNoRw,Jam);
     }//GEN-LAST:event_TanggalKeyPressed
 
     private void tbObatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbObatMouseClicked
         if(tabMode.getRowCount()!=0){
             try {
                 getData();
             } catch (java.lang.NullPointerException e) {
                 System.out.println("Error saat klik tabel: " + e);
             }
         }
     }//GEN-LAST:event_tbObatMouseClicked
 
     private void tbObatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbObatKeyPressed
         if(tabMode.getRowCount()!=0){
             if((evt.getKeyCode()==KeyEvent.VK_ENTER)||(evt.getKeyCode()==KeyEvent.VK_UP)||(evt.getKeyCode()==KeyEvent.VK_DOWN)){
                 try {
                     getData();
                 } catch (java.lang.NullPointerException e) {
                      System.out.println("Error saat navigasi tabel: " + e);
                 }
             } else if (evt.getKeyCode()==KeyEvent.VK_SPACE) { // Jika tekan spasi di tabel
                 try {
                     getData(); // Ambil data
                     ChkInput.setSelected(true); // Buka panel input
                     isForm();
                 } catch (java.lang.NullPointerException e) {
                      System.out.println("Error saat buka edit via spasi: " + e);
                 }
             } else if(evt.getKeyCode() == KeyEvent.VK_A && evt.isControlDown()){ // Select all (Ctrl+A)
                 tbObat.requestFocus();
                 tbObat.setRowSelectionInterval(0, tbObat.getRowCount()-1);
             }
         }
     }//GEN-LAST:event_tbObatKeyPressed
 
     private void ChkInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChkInputActionPerformed
         isForm();
     }//GEN-LAST:event_ChkInputActionPerformed
 
     private void JamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JamKeyPressed
         Valid.pindah(evt,Tanggal,Menit);
     }//GEN-LAST:event_JamKeyPressed
 
     private void MenitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MenitKeyPressed
         Valid.pindah(evt,Jam,Detik);
     }//GEN-LAST:event_MenitKeyPressed
 
     private void DetikKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DetikKeyPressed
         Valid.pindah(evt,Menit,btnPetugas);
     }//GEN-LAST:event_DetikKeyPressed
 
     private void NIPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NIPKeyPressed
          if(evt.getKeyCode()==KeyEvent.VK_PAGE_DOWN){
              if(NamaPetugas.getText().isEmpty()){ // Cari nama hanya jika kosong
                  NamaPetugas.setText(petugas.tampil3(NIP.getText()));
              }
         }else if(evt.getKeyCode()==KeyEvent.VK_PAGE_UP){
             btnPetugas.requestFocus(); // Kembali ke tombol petugas
         }else if(evt.getKeyCode()==KeyEvent.VK_ENTER){
             GCS.requestFocus(); // Enter dari NIP pindah ke GCS
         }else if(evt.getKeyCode()==KeyEvent.VK_UP){
             btnPetugasActionPerformed(null);
         }
     }//GEN-LAST:event_NIPKeyPressed
 
     private void btnPetugasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPetugasActionPerformed
         petugas.emptTeks();
         petugas.isCek();
         petugas.setSize(internalFrame1.getWidth()-20,internalFrame1.getHeight()-20);
         petugas.setLocationRelativeTo(internalFrame1);
         petugas.setVisible(true);
     }//GEN-LAST:event_btnPetugasActionPerformed
 
     private void btnPetugasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPetugasKeyPressed
         Valid.pindah(evt,Detik,GCS); // Pindah ke GCS setelah tekan tombol petugas
     }//GEN-LAST:event_btnPetugasKeyPressed
 
     // Nama method diubah sesuai nama komponen menu item
     private void MnCatatanObservasiBayiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnCatatanObservasiBayiActionPerformed
         if(tbObat.getSelectedRow()>-1){
             Map<String, Object> param = new HashMap<>();
             param.put("namars",akses.getnamars());
             param.put("alamatrs",akses.getalamatrs());
             param.put("kotars",akses.getkabupatenrs());
             param.put("propinsirs",akses.getpropinsirs());
             param.put("kontakrs",akses.getkontakrs());
             param.put("emailrs",akses.getemailrs());
             param.put("logo",Sequel.cariGambar("select setting.logo from setting"));
             param.put("norawat",tbObat.getValueAt(tbObat.getSelectedRow(),0).toString());
 
             // Query untuk Print Formulir Detail Bayi per Pasien
                           Valid.MyReportqry("rptFormulirCatatanObservasiBayi.jasper","report","::[ Formulir Catatan Observasi Bayi ]::",
                 "select reg_periksa.no_rawat,pasien.no_rkm_medis,pasien.nm_pasien,reg_periksa.umurdaftar,reg_periksa.sttsumur,reg_periksa.tgl_registrasi,reg_periksa.jam_reg,"+
                 "pasien.jk,pasien.tgl_lahir,catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat,catatan_observasi_bayi.gcs,dokter.nm_dokter,"+
                 "catatan_observasi_bayi.td,catatan_observasi_bayi.hr,catatan_observasi_bayi.rr,catatan_observasi_bayi.suhu,catatan_observasi_bayi.spo2,"+
                 "catatan_observasi_bayi.retraksi_dada, catatan_observasi_bayi.ogt_residu, catatan_observasi_bayi.asi_jumlah, catatan_observasi_bayi.pasi_jumlah, " +
                 "catatan_observasi_bayi.bak_status, catatan_observasi_bayi.bab_status, catatan_observasi_bayi.ikterik_status, catatan_observasi_bayi.nch, " +
                 // *** TAMBAHKAN KOLOM NIP DI SINI ***
                 "catatan_observasi_bayi.nip, " +
                 "petugas.nama as nama_petugas "+
                 "from catatan_observasi_bayi inner join reg_periksa on catatan_observasi_bayi.no_rawat=reg_periksa.no_rawat "+
                 "inner join pasien on reg_periksa.no_rkm_medis=pasien.no_rkm_medis "+
                 "inner join dokter on dokter.kd_dokter=reg_periksa.kd_dokter "+
                 "inner join petugas on catatan_observasi_bayi.nip=petugas.nip where reg_periksa.no_rawat='"+tbObat.getValueAt(tbObat.getSelectedRow(),0).toString()+"' "+
                 "order by catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat",param);
         } else {
             JOptionPane.showMessageDialog(null,"Maaf, silahkan pilih data observasi pasien terlebih dahulu.");
         }
     }//GEN-LAST:event_MnCatatanObservasiBayiActionPerformed
 
     private void GCSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GCSKeyPressed
         Valid.pindah(evt,btnPetugas,TD); // Pindah dari petugas/NIP ke GCS, lalu ke TD
     }//GEN-LAST:event_GCSKeyPressed
 
     private void HRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HRKeyPressed
         Valid.pindah(evt,TD,RR);
     }//GEN-LAST:event_HRKeyPressed
 
     private void SuhuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SuhuKeyPressed
         Valid.pindah(evt,RR,SPO);
     }//GEN-LAST:event_SuhuKeyPressed
 
     private void TDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TDKeyPressed
         Valid.pindah(evt,GCS,HR);
     }//GEN-LAST:event_TDKeyPressed
 
     private void RRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RRKeyPressed
         Valid.pindah(evt,HR,Suhu);
     }//GEN-LAST:event_RRKeyPressed
 
     private void SPOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SPOKeyPressed
         Valid.pindah(evt,Suhu,RetraksiDada); // Pindah ke field bayi pertama
     }//GEN-LAST:event_SPOKeyPressed
 
     // === KeyPressed Handler untuk Field Baru ===
     private void RetraksiDadaKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, SPO, OgtResidu);
     }
 
     private void OgtResiduKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, RetraksiDada, Nch); // Pindah ke NCH setelah OGT
     }
 
     private void AsiJumlahKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, Nch, PasiJumlah); // Pindah dari NCH ke ASI, lalu PASI
     }
 
     private void PasiJumlahKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, AsiJumlah, BakStatus);
     }
 
     private void BakStatusKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, PasiJumlah, BabStatus);
     }
 
     private void BabStatusKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, BakStatus, IkterikStatus);
     }
 
     private void IkterikStatusKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, BabStatus, BtnSimpan); // Pindah dari Ikterik ke Simpan
     }
 
     private void NchKeyPressed(java.awt.event.KeyEvent evt) {
         Valid.pindah(evt, OgtResidu, AsiJumlah); // Pindah dari OGT ke NCH, lalu ASI
     }
     // === Akhir KeyPressed Handler Baru ===
 
     // TPasienKeyPressed tidak ada di kode asli
     private void TPasienKeyPressed(java.awt.event.KeyEvent evt) {
        // Kosongkan atau sesuaikan jika perlu
     }
 
     // TNoRMKeyPressed tidak ada di kode asli
     private void TNoRMKeyPressed(java.awt.event.KeyEvent evt) {
        // Kosongkan atau sesuaikan jika perlu
     }
 
 
     /**
     * @param args the command line arguments
     */
     public static void main(String args[]) {
         java.awt.EventQueue.invokeLater(() -> {
             RMDataCatatanObservasiBayi dialog = new RMDataCatatanObservasiBayi(new javax.swing.JFrame(), true);
             dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                 @Override
                 public void windowClosing(java.awt.event.WindowEvent e) {
                     System.exit(0);
                 }
             });
             dialog.setVisible(true);
         });
     }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private widget.TextBox AsiJumlah;
    private widget.TextBox BabStatus;
    private widget.TextBox BakStatus;
    private widget.Button BtnAll;
    private widget.Button BtnBatal;
    private widget.Button BtnCari;
    private widget.Button BtnEdit;
    private widget.Button BtnHapus;
    private widget.Button BtnKeluar;
    private widget.Button BtnPrint;
    private widget.Button BtnSimpan;
    private widget.CekBox ChkInput;
    private widget.CekBox ChkKejadian;
    private widget.Tanggal DTPCari1;
    private widget.Tanggal DTPCari2;
    private widget.ComboBox Detik;
    private widget.PanelBiasa FormInput;
    private widget.TextBox GCS;
    private widget.TextBox HR;
    private widget.TextBox IkterikStatus;
    private widget.TextBox JK;
    private widget.ComboBox Jam;
    private widget.Label LCount;
    private widget.ComboBox Menit;
    private javax.swing.JMenuItem MnCatatanObservasiBayi;
    private widget.TextBox NIP;
    private widget.TextBox NamaPetugas;
    private widget.TextBox Nch;
    private widget.TextBox OgtResidu;
    private javax.swing.JPanel PanelInput;
    private widget.TextBox PasiJumlah;
    private widget.TextBox RR;
    private widget.TextBox RetraksiDada;
    private widget.TextBox SPO;
    private widget.ScrollPane Scroll;
    private widget.TextBox Suhu;
    private widget.TextBox TCari;
    private widget.TextBox TD;
    private widget.TextBox TNoRM;
    private widget.TextBox TNoRw;
    private widget.TextBox TPasien;
    private widget.Tanggal Tanggal;
    private widget.TextBox TanggalRegistrasi;
    private widget.TextBox TglLahir;
    private widget.TextBox Umur;
    private widget.Button btnPetugas;
    private widget.InternalFrame internalFrame1;
    private widget.Label jLabel12;
    private widget.Label jLabel16;
    private widget.Label jLabel17;
    private widget.Label jLabel18;
    private widget.Label jLabel19;
    private widget.Label jLabel20;
    private widget.Label jLabel21;
    private widget.Label jLabel22;
    private widget.Label jLabel23;
    private widget.Label jLabel25;
    private widget.Label jLabel26;
    private widget.Label jLabel27;
    private widget.Label jLabel28;
    private widget.Label jLabel29;
    private widget.Label jLabel35;
    private widget.Label jLabel4;
    private widget.Label jLabel6;
    private widget.Label jLabel7;
    private widget.Label jLabel8;
    private widget.Label jLabelAsi;
    private widget.Label jLabelBab;
    private widget.Label jLabelBak;
    private widget.Label jLabelIkterik;
    private widget.Label jLabelNch;
    private widget.Label jLabelOgt;
    private widget.Label jLabelPasi;
    private widget.Label jLabelRetraksi;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private widget.panelisi panelGlass8;
    private widget.panelisi panelGlass9;
    private widget.Table tbObat;
    // End of variables declaration//GEN-END:variables
 
     public void tampil() {
         Valid.tabelKosong(tabMode);
         try{
             String sql;
             // Query Tampil Data Observasi Bayi
             if(TCari.getText().trim().isEmpty()){
                 sql = "select reg_periksa.no_rawat,pasien.no_rkm_medis,pasien.nm_pasien,reg_periksa.umurdaftar,reg_periksa.sttsumur,"+
                       "pasien.jk,pasien.tgl_lahir,catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat,catatan_observasi_bayi.gcs,"+
                       "catatan_observasi_bayi.td,catatan_observasi_bayi.hr,catatan_observasi_bayi.rr,catatan_observasi_bayi.suhu,catatan_observasi_bayi.spo2,"+
                       "catatan_observasi_bayi.retraksi_dada, catatan_observasi_bayi.ogt_residu, catatan_observasi_bayi.asi_jumlah, catatan_observasi_bayi.pasi_jumlah, " +
                       "catatan_observasi_bayi.bak_status, catatan_observasi_bayi.bab_status, catatan_observasi_bayi.ikterik_status, catatan_observasi_bayi.nch, " +
                       "catatan_observasi_bayi.nip,petugas.nama " +
                       "from catatan_observasi_bayi inner join reg_periksa on catatan_observasi_bayi.no_rawat=reg_periksa.no_rawat "+
                       "inner join pasien on reg_periksa.no_rkm_medis=pasien.no_rkm_medis "+
                       "inner join petugas on catatan_observasi_bayi.nip=petugas.nip where "+
                       "catatan_observasi_bayi.tgl_perawatan between ? and ? order by catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat";
             }else{
                  sql = "select reg_periksa.no_rawat,pasien.no_rkm_medis,pasien.nm_pasien,reg_periksa.umurdaftar,reg_periksa.sttsumur,"+
                       "pasien.jk,pasien.tgl_lahir,catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat,catatan_observasi_bayi.gcs,"+
                       "catatan_observasi_bayi.td,catatan_observasi_bayi.hr,catatan_observasi_bayi.rr,catatan_observasi_bayi.suhu,catatan_observasi_bayi.spo2,"+
                       "catatan_observasi_bayi.retraksi_dada, catatan_observasi_bayi.ogt_residu, catatan_observasi_bayi.asi_jumlah, catatan_observasi_bayi.pasi_jumlah, " +
                       "catatan_observasi_bayi.bak_status, catatan_observasi_bayi.bab_status, catatan_observasi_bayi.ikterik_status, catatan_observasi_bayi.nch, " +
                       "catatan_observasi_bayi.nip,petugas.nama " +
                       "from catatan_observasi_bayi inner join reg_periksa on catatan_observasi_bayi.no_rawat=reg_periksa.no_rawat "+
                       "inner join pasien on reg_periksa.no_rkm_medis=pasien.no_rkm_medis "+
                       "inner join petugas on catatan_observasi_bayi.nip=petugas.nip where "+
                       "catatan_observasi_bayi.tgl_perawatan between ? and ? and (reg_periksa.no_rawat like ? or pasien.no_rkm_medis like ? or pasien.nm_pasien like ? or catatan_observasi_bayi.nip like ? or petugas.nama like ?) "+
                       "order by catatan_observasi_bayi.tgl_perawatan,catatan_observasi_bayi.jam_rawat ";
             }
             ps=koneksi.prepareStatement(sql);
             try {
                 if(TCari.getText().trim().isEmpty()){
                     ps.setString(1,Valid.SetTgl(DTPCari1.getSelectedItem()+""));
                     ps.setString(2,Valid.SetTgl(DTPCari2.getSelectedItem()+""));
                 }else{
                     ps.setString(1,Valid.SetTgl(DTPCari1.getSelectedItem()+""));
                     ps.setString(2,Valid.SetTgl(DTPCari2.getSelectedItem()+""));
                     ps.setString(3,"%"+TCari.getText()+"%");
                     ps.setString(4,"%"+TCari.getText()+"%");
                     ps.setString(5,"%"+TCari.getText()+"%");
                     ps.setString(6,"%"+TCari.getText()+"%");
                     ps.setString(7,"%"+TCari.getText()+"%");
                 }
 
                 rs=ps.executeQuery();
                 while(rs.next()){
                     // Isi tabel dengan data baru
                     tabMode.addRow(new Object[]{
                         rs.getString("no_rawat"),rs.getString("no_rkm_medis"),rs.getString("nm_pasien"), // 0-2
                         rs.getString("umurdaftar")+" "+rs.getString("sttsumur"),rs.getString("jk"),rs.getDate("tgl_lahir"), // 3-5
                         rs.getString("tgl_perawatan"),rs.getString("jam_rawat"),rs.getString("gcs"),rs.getString("td"), // 6-9
                         rs.getString("hr"),rs.getString("rr"),rs.getString("suhu"),rs.getString("spo2"), // 10-13
                         rs.getString("retraksi_dada"), rs.getString("ogt_residu"), rs.getString("asi_jumlah"), rs.getString("pasi_jumlah"), // 14-17
                         rs.getString("bak_status"), rs.getString("bab_status"), rs.getString("ikterik_status"), rs.getString("nch"), // 18-21
                         rs.getString("nip"), rs.getString("nama") // 22-23
                     });
                 }
             } catch (Exception e) {
                 System.out.println("Notif tampil(): "+e);
             } finally{
                 if(rs!=null){ try { rs.close(); } catch (Exception e) { System.out.println("Notif rs tampil: "+e); }}
                 if(ps!=null){ try { ps.close(); } catch (Exception e) { System.out.println("Notif ps tampil: "+e); }}
             }
         }catch(Exception e){
             System.out.println("Notifikasi tampil() outer: "+e);
         }
         LCount.setText(""+tabMode.getRowCount());
     }
 
     public void emptTeks() {
         GCS.setText("");
         TD.setText("");
         HR.setText("");
         RR.setText("");
         Suhu.setText("");
         SPO.setText("");
         // Kosongkan field baru
         RetraksiDada.setText("");
         OgtResidu.setText("");
         AsiJumlah.setText("");
         PasiJumlah.setText("");
         BakStatus.setText("");
         BabStatus.setText("");
         IkterikStatus.setText("");
         Nch.setText("");
         // Reset tanggal hanya jika diizinkan
         if (!TANGGALMUNDUR.equals("no") || akses.getkode().equals("Admin Utama")) {
              Tanggal.setDate(new Date());
         } else {
             // Jika tidak boleh mundur, set tanggal ke tanggal terakhir pasien dipilih (dari isRawat)
              if(!TNoRw.getText().isEmpty() && !TanggalRegistrasi.getText().isEmpty()){
                  try {
                      ps = koneksi.prepareStatement("select tgl_registrasi from reg_periksa where no_rawat=?");
                      ps.setString(1, TNoRw.getText());
                      rs = ps.executeQuery();
                      if(rs.next()){
                          Tanggal.setDate(rs.getDate("tgl_registrasi"));
                      }
                       if (rs != null) rs.close();
                       if (ps != null) ps.close();
                  } catch (Exception e) {
                      Tanggal.setDate(new Date()); // Fallback ke tanggal hari ini jika error
                  }
              } else {
                   Tanggal.setDate(new Date()); // Fallback jika No Rawat kosong
              }
         }
         GCS.requestFocus(); // Fokus ke GCS setelah batal
     }
 
     // Helper function untuk konversi aman Object ke String
     private String objToStr(Object obj){
         return obj == null ? "" : obj.toString();
     }
 
     // Method getData() SUDAH DIPERBAIKI
     private void getData() {
         if(tbObat.getSelectedRow()!= -1){
             int row = tbObat.getSelectedRow();
 
             TNoRw.setText(objToStr(tbObat.getValueAt(row,0)));
             TNoRM.setText(objToStr(tbObat.getValueAt(row,1)));
             TPasien.setText(objToStr(tbObat.getValueAt(row,2)));
             Umur.setText(objToStr(tbObat.getValueAt(row,3)));
             JK.setText(objToStr(tbObat.getValueAt(row,4)));
             TglLahir.setText(objToStr(tbObat.getValueAt(row,5)));
             Valid.SetTgl(Tanggal, objToStr(tbObat.getValueAt(row,6)));
 
             String jamRawat = objToStr(tbObat.getValueAt(row,7));
             if (jamRawat.length() >= 8) {
                 Jam.setSelectedItem(jamRawat.substring(0,2));
                 Menit.setSelectedItem(jamRawat.substring(3,5));
                 Detik.setSelectedItem(jamRawat.substring(6,8));
             } else {
                  Jam.setSelectedItem("00");
                  Menit.setSelectedItem("00");
                  Detik.setSelectedItem("00");
             }
 
             GCS.setText(objToStr(tbObat.getValueAt(row,8)));
             TD.setText(objToStr(tbObat.getValueAt(row,9)));
             HR.setText(objToStr(tbObat.getValueAt(row,10)));
             RR.setText(objToStr(tbObat.getValueAt(row,11)));
             Suhu.setText(objToStr(tbObat.getValueAt(row,12)));
             SPO.setText(objToStr(tbObat.getValueAt(row,13)));
             RetraksiDada.setText(objToStr(tbObat.getValueAt(row,14)));
             OgtResidu.setText(objToStr(tbObat.getValueAt(row,15)));
             AsiJumlah.setText(objToStr(tbObat.getValueAt(row,16)));
             PasiJumlah.setText(objToStr(tbObat.getValueAt(row,17)));
             BakStatus.setText(objToStr(tbObat.getValueAt(row,18)));
             BabStatus.setText(objToStr(tbObat.getValueAt(row,19)));
             IkterikStatus.setText(objToStr(tbObat.getValueAt(row,20)));
             Nch.setText(objToStr(tbObat.getValueAt(row,21)));
             NIP.setText(objToStr(tbObat.getValueAt(row, 22)));
             NamaPetugas.setText(objToStr(tbObat.getValueAt(row, 23)));
         }
     }
 
 
     private void isRawat() {
         try {
             ps=koneksi.prepareStatement(
                     "select reg_periksa.no_rkm_medis,pasien.nm_pasien,pasien.jk,pasien.tgl_lahir,reg_periksa.tgl_registrasi,reg_periksa.umurdaftar,reg_periksa.sttsumur,"+
                     "reg_periksa.jam_reg from reg_periksa inner join pasien on reg_periksa.no_rkm_medis=pasien.no_rkm_medis where reg_periksa.no_rawat=?");
             try {
                 ps.setString(1,TNoRw.getText());
                 rs=ps.executeQuery();
                 if(rs.next()){
                     TNoRM.setText(rs.getString("no_rkm_medis"));
                     TPasien.setText(rs.getString("nm_pasien"));
                     JK.setText(rs.getString("jk"));
                     Umur.setText(rs.getString("umurdaftar")+" "+rs.getString("sttsumur"));
                     TanggalRegistrasi.setText(rs.getString("tgl_registrasi")+" "+rs.getString("jam_reg"));
                     TglLahir.setText(rs.getString("tgl_lahir"));
                     DTPCari1.setDate(rs.getDate("tgl_registrasi")); // Set DTP Cari 1 ke tgl registrasi
                     // Set tanggal form jika tidak boleh mundur ATAU jika tanggal form masih tanggal default hari ini
                     if ((!TANGGALMUNDUR.equals("no") && !akses.getkode().equals("Admin Utama")) == false || Valid.SetTgl(Tanggal.getSelectedItem()+"").equals(Valid.SetTgl(new Date()+""))) {
                        Tanggal.setDate(rs.getDate("tgl_registrasi"));
                     }
                     emptTeks(); // Kosongkan field observasi
                 } else {
                      // Jika no rawat tidak ditemukan
                       TNoRM.setText("");
                       TPasien.setText("");
                       JK.setText("");
                       Umur.setText("");
                       TanggalRegistrasi.setText("");
                       TglLahir.setText("");
                       emptTeks(); // Kosongkan juga field input
                       JOptionPane.showMessageDialog(null, "Data pasien dengan No. Rawat tersebut tidak ditemukan.");
                       TNoRw.requestFocus();
                  }
             } catch (Exception e) {
                 System.out.println("Notif isRawat() inner: "+e);
             } finally{
                  if(rs!=null){ try { rs.close(); } catch (Exception e) { System.out.println("Notif rs isRawat: "+e); }}
                  if(ps!=null){ try { ps.close(); } catch (Exception e) { System.out.println("Notif ps isRawat: "+e); }}
             }
         } catch (Exception e) {
             System.out.println("Notif isRawat() outer: "+e);
         }
     }
 
     // Modifikasi setNoRm untuk menerima tgl1 juga
     public void setNoRm(String norwt, Date tgl1, Date tgl2) {
         TNoRw.setText(norwt);
         TCari.setText(norwt);
         DTPCari1.setDate(tgl1); // Set tanggal awal pencarian
         DTPCari2.setDate(tgl2); // Set tanggal akhir pencarian
         isRawat(); // Ambil data pasien
         tampil(); // Tampilkan observasi pasien
         ChkInput.setSelected(true); // Buka panel input
         isForm();
         // Set petugas jika user login adalah petugas
         if(akses.getjml2()>=1){
              NIP.setText(akses.getkode());
              NamaPetugas.setText(akses.getnamauser());
         } else {
              NIP.setText("");
              NamaPetugas.setText("");
         }
     }
 
     // Overload setNoRm lama untuk kompatibilitas
     public void setNoRm(String norwt, Date tgl2) {
         TNoRw.setText(norwt);
         TCari.setText(norwt);
         DTPCari2.setDate(tgl2);
         isRawat(); // Ini akan set DTPCari1 ke tgl registrasi
         tampil(); // Tampilkan observasi pasien
         ChkInput.setSelected(true);
         isForm();
         // Set petugas jika user login adalah petugas
         if(akses.getjml2()>=1){
              NIP.setText(akses.getkode());
              NamaPetugas.setText(akses.getnamauser());
         } else {
              NIP.setText("");
              NamaPetugas.setText("");
         }
     }
 
     private void isForm(){
         if(ChkInput.isSelected()==true){
             ChkInput.setVisible(false);
             PanelInput.setPreferredSize(new Dimension(WIDTH,214)); // Sesuaikan tinggi panel input
             FormInput.setVisible(true);
             ChkInput.setVisible(true);
         }else if(ChkInput.isSelected()==false){
             ChkInput.setVisible(false);
             PanelInput.setPreferredSize(new Dimension(WIDTH,20));
             FormInput.setVisible(false);
             ChkInput.setVisible(true);
         }
     }
 
     public void isCek(){
         // ** Menggunakan hak akses BARU: catatan_observasi_bayi **
         BtnSimpan.setEnabled(akses.getcatatan_observasi_igd());
         BtnHapus.setEnabled(akses.getcatatan_observasi_igd());
         BtnEdit.setEnabled(akses.getcatatan_observasi_igd());
         BtnPrint.setEnabled(akses.getcatatan_observasi_igd());
 
         // Atur NIP/Petugas berdasarkan sesi login
         if(akses.getjml2()>=1){ // Jika user login adalah petugas
             NIP.setEditable(false);
             btnPetugas.setEnabled(false);
             NIP.setText(akses.getkode());
             NamaPetugas.setText(akses.getnamauser());
             if(NamaPetugas.getText().isEmpty()){
                 NIP.setText("");
                 JOptionPane.showMessageDialog(null,"User login terdeteksi sebagai petugas tapi nama kosong?");
             }
         } else { // Jika bukan petugas (misal admin)
              NIP.setEditable(true);
              btnPetugas.setEnabled(true);
         }
 
         // Atur tanggal berdasarkan TANGGALMUNDUR
         boolean bolehMundur = !TANGGALMUNDUR.equals("no") || akses.getkode().equals("Admin Utama");
         Tanggal.setEnabled(bolehMundur);
         ChkKejadian.setEnabled(bolehMundur);
         Jam.setEnabled(bolehMundur);
         Menit.setEnabled(bolehMundur);
         Detik.setEnabled(bolehMundur);
     }
 
     private void jam(){
         ActionListener taskPerformer = new ActionListener(){
             private int nilai_jam;
             private int nilai_menit;
             private int nilai_detik;
             @Override
             public void actionPerformed(ActionEvent e) {
                 String nol_jam = "";
                 String nol_menit = "";
                 String nol_detik = "";
                 Date now = Calendar.getInstance().getTime();
 
                 if(ChkKejadian.isSelected()){
                     nilai_jam = now.getHours();
                     nilai_menit = now.getMinutes();
                     nilai_detik = now.getSeconds();
                 }else {
                     try {
                         nilai_jam = Integer.parseInt(Jam.getSelectedItem().toString());
                         nilai_menit = Integer.parseInt(Menit.getSelectedItem().toString());
                         nilai_detik = Integer.parseInt(Detik.getSelectedItem().toString());
                     } catch (Exception ex) {
                         nilai_jam = now.getHours();
                         nilai_menit = now.getMinutes();
                         nilai_detik = now.getSeconds();
                          // Hanya set selected jika komponen sudah ready
                         if (Jam.getItemCount() > 0 && Menit.getItemCount() > 0 && Detik.getItemCount() > 0) {
                             ChkKejadian.setSelected(true);
                         }
                     }
                 }
 
                 if (nilai_jam <= 9) { nol_jam = "0"; }
                 if (nilai_menit <= 9) { nol_menit = "0"; }
                 if (nilai_detik <= 9) { nol_detik = "0"; }
 
                 String jam_ = nol_jam + Integer.toString(nilai_jam);
                 String menit = nol_menit + Integer.toString(nilai_menit);
                 String detik = nol_detik + Integer.toString(nilai_detik);
 
                 // Update combo box jika jam realtime DAN komponen sudah ready
                 if(ChkKejadian.isSelected() && Jam.getItemCount() > 0 && Menit.getItemCount() > 0 && Detik.getItemCount() > 0){
                     Jam.setSelectedItem(jam_);
                     Menit.setSelectedItem(menit);
                     Detik.setSelectedItem(detik);
                 }
             }
         };
         new Timer(1000, taskPerformer).start();
     }
 
     // Helper function untuk mengubah string kosong atau spasi menjadi null
     // dan trim string yang tidak kosong
     private String validasiInput(String input) {
         if (input == null || input.trim().isEmpty()) {
             return null; // Kembalikan null jika input kosong atau hanya spasi
         }
         return input.trim(); // Kembalikan string yang sudah di-trim jika tidak kosong
     }
 
      // Helper baru untuk memastikan nilai numerik atau "0"
     private String numericInputOrZero(javax.swing.JTextField field) {
         String validated = validasiInput(field.getText());
         // Jika setelah validasi hasilnya null (kosong), kembalikan "0"
         // Jika tidak null (ada angka/desimal valid), kembalikan hasil validasi
         return (validated == null) ? "0" : validated;
     }
 
     private void ganti() {
         // Query Update: 18 field di SET, 3 field di WHERE
         // Menggunakan PreparedStatement untuk keamanan dan penanganan tipe data
         try {
             ps = koneksi.prepareStatement(
                 "UPDATE catatan_observasi_bayi SET no_rawat=?, tgl_perawatan=?, jam_rawat=?, gcs=?, td=?, hr=?, rr=?, suhu=?, spo2=?, " +
                 "retraksi_dada=?, ogt_residu=?, asi_jumlah=?, pasi_jumlah=?, bak_status=?, bab_status=?, ikterik_status=?, nch=?, nip=? " +
                 "WHERE tgl_perawatan=? AND jam_rawat=? AND no_rawat=?");
             try {
                 ps.setString(1, TNoRw.getText());
                 ps.setString(2, Valid.SetTgl(Tanggal.getSelectedItem() + ""));
                 ps.setString(3, Jam.getSelectedItem() + ":" + Menit.getSelectedItem() + ":" + Detik.getSelectedItem());
 
                 // Handle VARCHAR (bisa null)
                 if (validasiInput(GCS.getText()) == null) { ps.setNull(4, Types.VARCHAR); } else { ps.setString(4, validasiInput(GCS.getText())); }
                 if (validasiInput(TD.getText()) == null) { ps.setNull(5, Types.VARCHAR); } else { ps.setString(5, validasiInput(TD.getText())); }
 
                 // Handle NUMERIC (set to NULL if empty/invalid, otherwise parse)
                 try { if (HR.getText().trim().isEmpty()) { ps.setNull(6, Types.SMALLINT); } else { ps.setInt(6, Integer.parseInt(HR.getText())); } } catch (NumberFormatException e) { ps.setNull(6, Types.SMALLINT); }
                 try { if (RR.getText().trim().isEmpty()) { ps.setNull(7, Types.TINYINT); } else { ps.setInt(7, Integer.parseInt(RR.getText())); } } catch (NumberFormatException e) { ps.setNull(7, Types.TINYINT); }
                 try { if (Suhu.getText().trim().isEmpty()) { ps.setNull(8, Types.DECIMAL); } else { ps.setDouble(8, Double.parseDouble(Suhu.getText())); } } catch (NumberFormatException e) { ps.setNull(8, Types.DECIMAL); }
                 try { if (SPO.getText().trim().isEmpty()) { ps.setNull(9, Types.TINYINT); } else { ps.setInt(9, Integer.parseInt(SPO.getText())); } } catch (NumberFormatException e) { ps.setNull(9, Types.TINYINT); }
 
                 // Handle VARCHAR (bisa null)
                 if (validasiInput(RetraksiDada.getText()) == null) { ps.setNull(10, Types.VARCHAR); } else { ps.setString(10, validasiInput(RetraksiDada.getText())); }
                 if (validasiInput(OgtResidu.getText()) == null) { ps.setNull(11, Types.VARCHAR); } else { ps.setString(11, validasiInput(OgtResidu.getText())); }
                 if (validasiInput(AsiJumlah.getText()) == null) { ps.setNull(12, Types.VARCHAR); } else { ps.setString(12, validasiInput(AsiJumlah.getText())); }
                 if (validasiInput(PasiJumlah.getText()) == null) { ps.setNull(13, Types.VARCHAR); } else { ps.setString(13, validasiInput(PasiJumlah.getText())); }
                 if (validasiInput(BakStatus.getText()) == null) { ps.setNull(14, Types.VARCHAR); } else { ps.setString(14, validasiInput(BakStatus.getText())); }
                 if (validasiInput(BabStatus.getText()) == null) { ps.setNull(15, Types.VARCHAR); } else { ps.setString(15, validasiInput(BabStatus.getText())); }
                 if (validasiInput(IkterikStatus.getText()) == null) { ps.setNull(16, Types.VARCHAR); } else { ps.setString(16, validasiInput(IkterikStatus.getText())); }
                 if (validasiInput(Nch.getText()) == null) { ps.setNull(17, Types.VARCHAR); } else { ps.setString(17, validasiInput(Nch.getText())); }
 
                 ps.setString(18, NIP.getText()); // NIP wajib
 
                 // WHERE clause values
                 ps.setString(19, objToStr(tbObat.getValueAt(tbObat.getSelectedRow(), 6))); // tgl_perawatan lama
                 ps.setString(20, objToStr(tbObat.getValueAt(tbObat.getSelectedRow(), 7))); // jam_rawat lama
                 ps.setString(21, objToStr(tbObat.getValueAt(tbObat.getSelectedRow(), 0))); // no_rawat lama
 
                 ps.executeUpdate();
                 tampil();
                 emptTeks();
 
             } catch (SQLException e) {
                 System.out.println("Notifikasi Ganti: " + e);
                 JOptionPane.showMessageDialog(null, "Gagal menyimpan perubahan data.\nError: " + e.getMessage());
             } finally {
                 if (ps != null) { try { ps.close(); } catch (SQLException ex) { System.out.println("Notif ps close ganti: " + ex); } }
             }
         } catch (SQLException e) {
             System.out.println("Notifikasi PrepareStatement Ganti: " + e);
         }
     }
 
 
     private void hapus() {
         // Query Hapus
         if (Sequel.queryu2tf("delete from catatan_observasi_bayi where tgl_perawatan=? and jam_rawat=? and no_rawat=?", 3, new String[]{
             objToStr(tbObat.getValueAt(tbObat.getSelectedRow(), 6)),
             objToStr(tbObat.getValueAt(tbObat.getSelectedRow(), 7)),
             objToStr(tbObat.getValueAt(tbObat.getSelectedRow(), 0))
         }) == true) {
             tabMode.removeRow(tbObat.getSelectedRow());
             LCount.setText("" + tabMode.getRowCount());
             emptTeks();
         } else {
             JOptionPane.showMessageDialog(null, "Gagal menghapus data.");
         }
     }
 
 
     private void simpan() {
         // Query Simpan: 18 kolom
         // Menggunakan PreparedStatement untuk keamanan dan penanganan tipe data
         try {
             ps = koneksi.prepareStatement(
                 "INSERT INTO catatan_observasi_bayi (no_rawat, tgl_perawatan, jam_rawat, gcs, td, hr, rr, suhu, spo2, " +
                 "retraksi_dada, ogt_residu, asi_jumlah, pasi_jumlah, bak_status, bab_status, ikterik_status, nch, nip) " +
                 "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
             try {
                 ps.setString(1, TNoRw.getText());
                 ps.setString(2, Valid.SetTgl(Tanggal.getSelectedItem() + ""));
                 ps.setString(3, Jam.getSelectedItem() + ":" + Menit.getSelectedItem() + ":" + Detik.getSelectedItem());
 
                 // Handle VARCHAR (bisa null)
                 if (validasiInput(GCS.getText()) == null) { ps.setNull(4, Types.VARCHAR); } else { ps.setString(4, validasiInput(GCS.getText())); }
                 if (validasiInput(TD.getText()) == null) { ps.setNull(5, Types.VARCHAR); } else { ps.setString(5, validasiInput(TD.getText())); }
 
                 // Handle NUMERIC (set to NULL if empty/invalid, otherwise parse)
                 try { if (HR.getText().trim().isEmpty()) { ps.setNull(6, Types.SMALLINT); } else { ps.setInt(6, Integer.parseInt(HR.getText())); } } catch (NumberFormatException e) { ps.setNull(6, Types.SMALLINT); }
                 try { if (RR.getText().trim().isEmpty()) { ps.setNull(7, Types.TINYINT); } else { ps.setInt(7, Integer.parseInt(RR.getText())); } } catch (NumberFormatException e) { ps.setNull(7, Types.TINYINT); }
                 try { if (Suhu.getText().trim().isEmpty()) { ps.setNull(8, Types.DECIMAL); } else { ps.setDouble(8, Double.parseDouble(Suhu.getText())); } } catch (NumberFormatException e) { ps.setNull(8, Types.DECIMAL); }
                 try { if (SPO.getText().trim().isEmpty()) { ps.setNull(9, Types.TINYINT); } else { ps.setInt(9, Integer.parseInt(SPO.getText())); } } catch (NumberFormatException e) { ps.setNull(9, Types.TINYINT); }
 
                 // Handle VARCHAR (bisa null)
                 if (validasiInput(RetraksiDada.getText()) == null) { ps.setNull(10, Types.VARCHAR); } else { ps.setString(10, validasiInput(RetraksiDada.getText())); }
                 if (validasiInput(OgtResidu.getText()) == null) { ps.setNull(11, Types.VARCHAR); } else { ps.setString(11, validasiInput(OgtResidu.getText())); }
                 if (validasiInput(AsiJumlah.getText()) == null) { ps.setNull(12, Types.VARCHAR); } else { ps.setString(12, validasiInput(AsiJumlah.getText())); }
                 if (validasiInput(PasiJumlah.getText()) == null) { ps.setNull(13, Types.VARCHAR); } else { ps.setString(13, validasiInput(PasiJumlah.getText())); }
                 if (validasiInput(BakStatus.getText()) == null) { ps.setNull(14, Types.VARCHAR); } else { ps.setString(14, validasiInput(BakStatus.getText())); }
                 if (validasiInput(BabStatus.getText()) == null) { ps.setNull(15, Types.VARCHAR); } else { ps.setString(15, validasiInput(BabStatus.getText())); }
                 if (validasiInput(IkterikStatus.getText()) == null) { ps.setNull(16, Types.VARCHAR); } else { ps.setString(16, validasiInput(IkterikStatus.getText())); }
                 if (validasiInput(Nch.getText()) == null) { ps.setNull(17, Types.VARCHAR); } else { ps.setString(17, validasiInput(Nch.getText())); }
 
                 ps.setString(18, NIP.getText()); // NIP wajib
 
                 ps.executeUpdate();
                 tampil();
                 LCount.setText("" + tabMode.getRowCount());
                 emptTeks();
 
             } catch (SQLException e) {
                 System.out.println("Notifikasi Simpan: " + e);
                 JOptionPane.showMessageDialog(null, "Gagal menyimpan data baru.\nError: " + e.getMessage());
             } finally {
                 if (ps != null) { try { ps.close(); } catch (SQLException ex) { System.out.println("Notif ps close simpan: " + ex); } }
             }
         } catch (SQLException e) {
              System.out.println("Notifikasi PrepareStatement Simpan: " + e);
         }
     }
 
 } // Akhir kelas RMDataCatatanObservasiBayi